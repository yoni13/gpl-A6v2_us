!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AAC_BSAC_ER	metadata.h	/^  AAC_BSAC_ER   = 22, \/* BSAC with error recovery *\/$/;"	e	enum:__anon10
AAC_CELP	metadata.h	/^  AAC_CELP      =  8, \/* CELP *\/$/;"	e	enum:__anon10
AAC_CELP_ER	metadata.h	/^  AAC_CELP_ER   = 24, \/* CELP with error recovery *\/$/;"	e	enum:__anon10
AAC_FX	metadata.h	/^  AAC_FX        = 16, \/* Algorithmic Synthesis and Audio FX *\/$/;"	e	enum:__anon10
AAC_HE	metadata.h	/^  AAC_HE        =  5, \/* AAC High efficiency (SBR) *\/$/;"	e	enum:__anon10
AAC_HE_L3	metadata.h	/^  AAC_HE_L3     = 31, \/* Reserved : seems to be HeAAC L3 *\/$/;"	e	enum:__anon10
AAC_HILN_ER	metadata.h	/^  AAC_HILN_ER   = 26, \/* HILN with error recovery *\/$/;"	e	enum:__anon10
AAC_HVXC	metadata.h	/^  AAC_HVXC      =  9, \/* HVXC *\/$/;"	e	enum:__anon10
AAC_HXVC_ER	metadata.h	/^  AAC_HXVC_ER   = 25, \/* HXVC with error recovery *\/$/;"	e	enum:__anon10
AAC_INVALID	metadata.h	/^  AAC_INVALID   =  0,$/;"	e	enum:__anon10
AAC_LC	metadata.h	/^  AAC_LC        =  2, \/* AAC Low complexity *\/$/;"	e	enum:__anon10
AAC_LC_ER	metadata.h	/^  AAC_LC_ER     = 17, \/* AAC Low complexity with error recovery *\/$/;"	e	enum:__anon10
AAC_LD_ER	metadata.h	/^  AAC_LD_ER     = 23, \/* AAC LD with error recovery *\/$/;"	e	enum:__anon10
AAC_LTP	metadata.h	/^  AAC_LTP       =  4, \/* AAC Long term prediction *\/$/;"	e	enum:__anon10
AAC_LTP_ER	metadata.h	/^  AAC_LTP_ER    = 19, \/* AAC Long term prediction with error recovery *\/$/;"	e	enum:__anon10
AAC_MAIN	metadata.h	/^  AAC_MAIN      =  1, \/* AAC Main *\/$/;"	e	enum:__anon10
AAC_MIDI	metadata.h	/^  AAC_MIDI      = 15, \/* General MIDI *\/$/;"	e	enum:__anon10
AAC_MS	metadata.h	/^  AAC_MS        = 13, \/* Main synthetic *\/$/;"	e	enum:__anon10
AAC_PARAM_ER	metadata.h	/^  AAC_PARAM_ER  = 27, \/* Parametric with error recovery *\/$/;"	e	enum:__anon10
AAC_SCALE	metadata.h	/^  AAC_SCALE     =  6, \/* Scalable *\/$/;"	e	enum:__anon10
AAC_SCALE_ER	metadata.h	/^  AAC_SCALE_ER  = 20, \/* AAC scalable with error recovery *\/$/;"	e	enum:__anon10
AAC_SSC	metadata.h	/^  AAC_SSC       = 28, \/* AAC SSC *\/$/;"	e	enum:__anon10
AAC_SSR	metadata.h	/^  AAC_SSR       =  3, \/* AAC SSR *\/$/;"	e	enum:__anon10
AAC_TTSI	metadata.h	/^  AAC_TTSI      = 12, \/* TTSI *\/$/;"	e	enum:__anon10
AAC_TWINVQ	metadata.h	/^  AAC_TWINVQ    =  7, \/* TwinVQ *\/$/;"	e	enum:__anon10
AAC_TWINVQ_ER	metadata.h	/^  AAC_TWINVQ_ER = 21, \/* TwinVQ with error recovery *\/$/;"	e	enum:__anon10
AAC_WAVE	metadata.h	/^  AAC_WAVE      = 14, \/* Wavetable synthesis *\/$/;"	e	enum:__anon10
AF_LINK	getifaddr.c	50;"	d	file:
ALL_MEDIA	minidlnatypes.h	67;"	d
ASF_VT_BOOL	tagutils/tagutils-asf.h	350;"	d
ASF_VT_BYTEARRAY	tagutils/tagutils-asf.h	349;"	d
ASF_VT_DWORD	tagutils/tagutils-asf.h	351;"	d
ASF_VT_QWORD	tagutils/tagutils-asf.h	352;"	d
ASF_VT_UNICODE	tagutils/tagutils-asf.h	348;"	d
ASF_VT_WORD	tagutils/tagutils-asf.h	353;"	d
AVDictionaryEntry	metadata.c	/^typedef AVMetadataTag AVDictionaryEntry;$/;"	t	file:
AVMEDIA_TYPE_AUDIO	libav.h	77;"	d
AVMEDIA_TYPE_VIDEO	libav.h	78;"	d
AV_DICT_IGNORE_SUFFIX	metadata.c	118;"	d	file:
AV_LOG_PANIC	scanner.c	55;"	d	file:
AcceptSocket_upnphttp	upnphttp.c	/^AcceptSocket_upnphttp(int *sock)$/;"	f
AddClientCache	clients.c	/^AddClientCache(struct in_addr addr, int type)$/;"	f
AddMulticastMembership	minissdp.c	/^AddMulticastMembership(int s, struct lan_addr_s *iface)$/;"	f	file:
AltBufferSize	tagutils/tagutils-asf.h	/^	__u32 AltBufferSize;$/;"	m	struct:_asf_extended_stream_object_t
AltDataBitrate	tagutils/tagutils-asf.h	/^	__u32 AltDataBitrate;$/;"	m	struct:_asf_extended_stream_object_t
AltInitialBufferFullness	tagutils/tagutils-asf.h	/^	__u32 AltInitialBufferFullness;$/;"	m	struct:_asf_extended_stream_object_t
AudioStream	tagutils/tagutils-asf.h	/^	asf_audio_stream_t *        AudioStream;$/;"	m	struct:_asf_header_object_t
Author	tagutils/tagutils-asf.h	/^	__u32 Author;$/;"	m	struct:_asf_content_description_t
AuthorLength	tagutils/tagutils-asf.h	/^	__u16 AuthorLength;$/;"	m	struct:_asf_content_description_t
AvgTimePerFrame	tagutils/tagutils-asf.h	/^	__u64 AvgTimePerFrame;$/;"	m	struct:_asf_extended_stream_object_t
BITMAPINFOHEADER	tagutils/tagutils-asf.h	/^} __PACKED__ BITMAPINFOHEADER;$/;"	t	typeref:struct:_BITMAPINFOHEADER
BLACK	image_utils.c	60;"	d	file:
BROWSEDIR_ID	scanner.h	28;"	d
BUF_LEN	inotify.c	53;"	d	file:
BrowseArgs	upnpdescgen.c	/^static const struct argument BrowseArgs[] =$/;"	v	typeref:struct:argument	file:
BrowseContentDirectory	upnpsoap.c	/^BrowseContentDirectory(struct upnphttp * h, const char * action)$/;"	f	file:
BufferSize	tagutils/tagutils-asf.h	/^	__u32 BufferSize;$/;"	m	struct:_asf_extended_stream_object_t
BuildHeader_upnphttp	upnphttp.c	/^BuildHeader_upnphttp(struct upnphttp * h, int respcode,$/;"	f
BuildResp2_upnphttp	upnphttp.c	/^BuildResp2_upnphttp(struct upnphttp * h, int respcode,$/;"	f
BuildResp_upnphttp	upnphttp.c	/^BuildResp_upnphttp(struct upnphttp *h, const char *body, int bodylen)$/;"	f
BuildSendAndCloseSoapResp	upnpsoap.c	/^BuildSendAndCloseSoapResp(struct upnphttp * h,$/;"	f	file:
CFLocaleCopyCurrent	configure	/^CFLocaleCopyCurrent();$/;"	f
CLEARFLAG	upnpglobalvars.h	205;"	d
CLIENT_CACHE_SLOTS	clients.h	24;"	d
CLOCK_MONOTONIC	uuid.c	51;"	d	file:
CODELENGTH	codelength.h	16;"	d
COL	image_utils.c	54;"	d	file:
COLUMNS	upnpsoap.c	685;"	d	file:
COL_ALPHA	image_utils.c	59;"	d	file:
COL_BLUE	image_utils.c	58;"	d	file:
COL_FULL	image_utils.c	55;"	d	file:
COL_GREEN	image_utils.c	57;"	d	file:
COL_RED	image_utils.c	56;"	d	file:
CONNECTIONMGR_CONTROLURL	minidlnapath.h	43;"	d
CONNECTIONMGR_EVENTURL	minidlnapath.h	44;"	d
CONNECTIONMGR_PATH	minidlnapath.h	42;"	d
CONSTRAINT_MUXING_VIOLATED	tagutils/tagutils-ogg.c	68;"	d	file:
CONSTRAINT_PAGE_AFTER_EOS	tagutils/tagutils-ogg.c	67;"	d	file:
CONTENTDIRECTORY_CONTROLURL	minidlnapath.h	39;"	d
CONTENTDIRECTORY_EVENTURL	minidlnapath.h	40;"	d
CONTENTDIRECTORY_PATH	minidlnapath.h	38;"	d
CONTENT_DIRECTORY_SCHEMAS	upnpsoap.h	27;"	d
ClearNameValueList	upnpreplyparse.c	/^ClearNameValueList(struct NameValueParserData * pdata)$/;"	f
CloseSocket_upnphttp	upnphttp.c	/^CloseSocket_upnphttp(struct upnphttp * h)$/;"	f
CodecList	tagutils/tagutils-asf.h	/^	asf_codec_list_t CodecList;$/;"	m	struct:_asf_header_object_t
ConnectionCompleteArgs	upnpdescgen.c	/^static const struct argument ConnectionCompleteArgs[] =$/;"	v	typeref:struct:argument	file:
ConnectionManagerActions	upnpdescgen.c	/^static const struct action ConnectionManagerActions[] =$/;"	v	typeref:struct:action	file:
ConnectionManagerVars	upnpdescgen.c	/^static const struct stateVar ConnectionManagerVars[] =$/;"	v	typeref:struct:stateVar	file:
ContentDescription	tagutils/tagutils-asf.h	/^	asf_content_description_t ContentDescription;$/;"	m	struct:_asf_header_object_t
ContentDirectoryActions	upnpdescgen.c	/^static const struct action ContentDirectoryActions[] =$/;"	v	typeref:struct:action	file:
ContentDirectoryVars	upnpdescgen.c	/^static const struct stateVar ContentDirectoryVars[] =$/;"	v	typeref:struct:stateVar	file:
Copyright	tagutils/tagutils-asf.h	/^	__u32 Copyright;$/;"	m	struct:_asf_content_description_t
CopyrightLength	tagutils/tagutils-asf.h	/^	__u16 CopyrightLength;$/;"	m	struct:_asf_content_description_t
CreateDatabase	scanner.c	/^CreateDatabase(void)$/;"	f
CreationTime	tagutils/tagutils-asf.h	/^	__u64 CreationTime;$/;"	m	struct:_asf_file_properties_t
DB_VERSION	upnpglobalvars.h	69;"	d
DEBUG	ubus.c	28;"	d	file:
DECODELENGTH	codelength.h	12;"	d
DEFAULT_RESP_SIZE	upnpsoap.h	24;"	d
DEFINE_GUID	tagutils/tagutils-asf.h	38;"	d
DESC_DEBUG	upnpdescgen.c	40;"	d	file:
DESIRED_WATCH_LIMIT	inotify.c	54;"	d	file:
DJBHash	utils.c	/^DJBHash(const char *str, int len)$/;"	f
DLNA_FLAG_DLNA_V1_5	upnpglobalvars.h	183;"	d
DLNA_FLAG_HTTP_STALLING	upnpglobalvars.h	184;"	d
DLNA_FLAG_LOP_BYTES	upnpglobalvars.h	188;"	d
DLNA_FLAG_LOP_NPT	upnpglobalvars.h	189;"	d
DLNA_FLAG_TM_B	upnpglobalvars.h	185;"	d
DLNA_FLAG_TM_I	upnpglobalvars.h	186;"	d
DLNA_FLAG_TM_S	upnpglobalvars.h	187;"	d
DLNA_NAMESPACE	upnpsoap.h	31;"	d
DLNA_STRICT_MASK	upnpglobalvars.h	199;"	d
DPRINTF	log.h	51;"	d
DataBitrate	tagutils/tagutils-asf.h	/^	__u32 DataBitrate;$/;"	m	struct:_asf_extended_stream_object_t
DataSize	tagutils/tagutils-asf.h	/^	__u32 DataSize;$/;"	m	struct:_asf_header_extension_t
Delete_upnphttp	upnphttp.c	/^Delete_upnphttp(struct upnphttp * h)$/;"	f
Desc	tagutils/tagutils-asf.h	/^	__u32 Desc;$/;"	m	struct:_asf_codec_entry_t
DescLen	tagutils/tagutils-asf.h	/^	__u16 DescLen;$/;"	m	struct:_asf_codec_entry_t
Description	tagutils/tagutils-asf.h	/^	__u32 Description;$/;"	m	struct:_asf_content_description_t
DescriptionLength	tagutils/tagutils-asf.h	/^	__u16 DescriptionLength;$/;"	m	struct:_asf_content_description_t
DisplayNameValueList	upnpreplyparse.c	/^DisplayNameValueList(char * buffer, int bufsize)$/;"	f
Duration	tagutils/tagutils-asf.h	/^	__u16 Duration;$/;"	m	struct:_asf_packet_t
ECCycle	tagutils/tagutils-asf.h	/^	__u8 ECCycle;$/;"	m	struct:_asf_packet_t
ECFlags	tagutils/tagutils-asf.h	/^	__u8 ECFlags;$/;"	m	struct:_asf_packet_t
ECType	tagutils/tagutils-asf.h	/^	__u8 ECType;$/;"	m	struct:_asf_packet_t
EConnecting	upnpevents.c	/^    EConnecting,$/;"	e	enum:notify_state_enum	file:
EConnectionManager	upnpevents.h	/^    EConnectionManager,$/;"	e	enum:subscriber_service_enum
EContentDirectory	upnpevents.h	/^    EContentDirectory = 1,$/;"	e	enum:subscriber_service_enum
ECreated	upnpevents.c	/^    ECreated=1,$/;"	e	enum:notify_state_enum	file:
EDenonReceiver	clients.h	/^	EDenonReceiver,$/;"	e	enum:client_types
EDirecTV	clients.h	/^	EDirecTV,$/;"	e	enum:client_types
EError	upnpevents.c	/^    EError $/;"	e	enum:notify_state_enum	file:
EFinished	upnpevents.c	/^    EFinished,$/;"	e	enum:notify_state_enum	file:
EFreeBox	clients.h	/^	EFreeBox,$/;"	e	enum:client_types
EFriendlyName	clients.h	/^	EFriendlyName,$/;"	e	enum:match_types
EFriendlyNameSSDP	clients.h	/^	EFriendlyNameSSDP$/;"	e	enum:match_types
EGet	upnphttp.h	/^	EGet,$/;"	e	enum:httpCommands
EHead	upnphttp.h	/^	EHead,$/;"	e	enum:httpCommands
ELGDevice	clients.h	/^	ELGDevice,$/;"	e	enum:client_types
ELifeTab	clients.h	/^	ELifeTab,$/;"	e	enum:client_types
EMPTY	metadata.h	/^	EMPTY,$/;"	e	enum:__anon11
EMSMediaReceiverRegistrar	upnpevents.h	/^    EMSMediaReceiverRegistrar$/;"	e	enum:subscriber_service_enum
EMarantzDMP	clients.h	/^	EMarantzDMP,$/;"	e	enum:client_types
EMatchNone	clients.h	/^	EMatchNone,$/;"	e	enum:match_types
EMediaRoom	clients.h	/^	EMediaRoom,$/;"	e	enum:client_types
EModelName	clients.h	/^	EModelName,$/;"	e	enum:match_types
ENABLE_DLNA_STRICT	options.h	/^	ENABLE_DLNA_STRICT,		\/* strictly adhere to DLNA specs *\/$/;"	e	enum:upnpconfigoptions
ENABLE_TIVO	options.h	/^	ENABLE_TIVO,			\/* enable support for streaming images and music to TiVo *\/$/;"	e	enum:upnpconfigoptions
ENetgearEVA2000	clients.h	/^	ENetgearEVA2000,$/;"	e	enum:client_types
EPS3	clients.h	/^	EPS3,$/;"	e	enum:client_types
EPanasonic	clients.h	/^	EPanasonic,$/;"	e	enum:client_types
EPopcornHour	clients.h	/^	EPopcornHour,$/;"	e	enum:client_types
EPost	upnphttp.h	/^	EPost,$/;"	e	enum:httpCommands
ERokuSoundBridge	clients.h	/^	ERokuSoundBridge,$/;"	e	enum:client_types
ESamsungSeriesA	clients.h	/^	ESamsungSeriesA,$/;"	e	enum:client_types
ESamsungSeriesB	clients.h	/^	ESamsungSeriesB,$/;"	e	enum:client_types
ESamsungSeriesCDE	clients.h	/^	ESamsungSeriesCDE,$/;"	e	enum:client_types
ESending	upnpevents.c	/^    ESending,$/;"	e	enum:notify_state_enum	file:
ESonyBDP	clients.h	/^	ESonyBDP,$/;"	e	enum:client_types
ESonyBravia	clients.h	/^	ESonyBravia,$/;"	e	enum:client_types
ESonyInternetTV	clients.h	/^	ESonyInternetTV,$/;"	e	enum:client_types
EStandardDLNA150	clients.h	/^	EStandardDLNA150,$/;"	e	enum:client_types
EStandardUPnP	clients.h	/^	EStandardUPnP$/;"	e	enum:client_types
ESubscribe	upnphttp.h	/^	ESubscribe,$/;"	e	enum:httpCommands
ETH_ALEN	uuid.h	27;"	d
EToshibaTV	clients.h	/^	EToshibaTV,$/;"	e	enum:client_types
EUnSubscribe	upnphttp.h	/^	EUnSubscribe$/;"	e	enum:httpCommands
EUnknown	upnphttp.h	/^	EUnknown = 0,$/;"	e	enum:httpCommands
EUserAgent	clients.h	/^	EUserAgent,$/;"	e	enum:match_types
EVENTED	upnpdescgen.h	60;"	d
EVENT_HANDLER	minidlna.h	/^typedef void (*EVENT_HANDLER)(void *data);$/;"	t
EVENT_SIZE	inotify.c	52;"	d	file:
EWaitingForResponse	upnpevents.c	/^    EWaitingForResponse,$/;"	e	enum:notify_state_enum	file:
EXAVClientInfo	clients.h	/^	EXAVClientInfo,$/;"	e	enum:match_types
EXbox	clients.h	/^	EXbox = 1,$/;"	e	enum:client_types
E_DEBUG	log.h	29;"	d
E_ERROR	log.h	26;"	d
E_FATAL	log.h	25;"	d
E_INFO	log.h	28;"	d
E_INVALID	upnphttp.c	/^	E_INVALID,$/;"	e	enum:event_type	file:
E_MAXDEBUG	log.h	30;"	d
E_OFF	log.h	24;"	d
E_RENEW	upnphttp.c	/^	E_RENEW$/;"	e	enum:event_type	file:
E_SUBSCRIBE	upnphttp.c	/^	E_SUBSCRIBE,$/;"	e	enum:event_type	file:
E_WARN	log.h	27;"	d
EndTime	tagutils/tagutils-asf.h	/^	__u64 EndTime;$/;"	m	struct:_asf_extended_stream_object_t
Entries	tagutils/tagutils-asf.h	/^	asf_codec_entry_t Entries[2];$/;"	m	struct:_asf_codec_list_t
ErrorCorrectionSize	tagutils/tagutils-asf.h	/^	__u32 ErrorCorrectionSize;$/;"	m	struct:_asf_stream_object_t
ErrorCorrectionType	tagutils/tagutils-asf.h	/^	GUID ErrorCorrectionType;$/;"	m	struct:_asf_stream_object_t
ExecuteSoapAction	upnpsoap.c	/^ExecuteSoapAction(struct upnphttp * h, const char * action, int n)$/;"	f
FF_PROFILE_H264_BASELINE	libav.h	61;"	d
FF_PROFILE_H264_CONSTRAINED_BASELINE	libav.h	64;"	d
FF_PROFILE_H264_HIGH	libav.h	70;"	d
FF_PROFILE_H264_MAIN	libav.h	67;"	d
FF_PROFILE_SKIP	libav.h	73;"	d
FILTER_AV_MEDIA_CLASS	upnpsoap.c	346;"	d	file:
FILTER_CHILDCOUNT	upnpsoap.c	318;"	d	file:
FILTER_DC_CREATOR	upnpsoap.c	319;"	d	file:
FILTER_DC_DATE	upnpsoap.c	320;"	d	file:
FILTER_DC_DESCRIPTION	upnpsoap.c	321;"	d	file:
FILTER_DLNA_NAMESPACE	upnpsoap.c	322;"	d	file:
FILTER_PV_SUBTITLE_FILE_TYPE	upnpsoap.c	344;"	d	file:
FILTER_PV_SUBTITLE_FILE_URI	upnpsoap.c	345;"	d	file:
FILTER_REFID	upnpsoap.c	323;"	d	file:
FILTER_RES	upnpsoap.c	324;"	d	file:
FILTER_RES_BITRATE	upnpsoap.c	325;"	d	file:
FILTER_RES_DURATION	upnpsoap.c	326;"	d	file:
FILTER_RES_NRAUDIOCHANNELS	upnpsoap.c	327;"	d	file:
FILTER_RES_RESOLUTION	upnpsoap.c	328;"	d	file:
FILTER_RES_SAMPLEFREQUENCY	upnpsoap.c	329;"	d	file:
FILTER_RES_SIZE	upnpsoap.c	330;"	d	file:
FILTER_SEARCHABLE	upnpsoap.c	331;"	d	file:
FILTER_SEC_CAPTION_INFO_EX	upnpsoap.c	342;"	d	file:
FILTER_SEC_DCM_INFO	upnpsoap.c	343;"	d	file:
FILTER_UPNP_ACTOR	upnpsoap.c	332;"	d	file:
FILTER_UPNP_ALBUM	upnpsoap.c	333;"	d	file:
FILTER_UPNP_ALBUMARTURI	upnpsoap.c	334;"	d	file:
FILTER_UPNP_ALBUMARTURI_DLNA_PROFILEID	upnpsoap.c	335;"	d	file:
FILTER_UPNP_ARTIST	upnpsoap.c	336;"	d	file:
FILTER_UPNP_GENRE	upnpsoap.c	337;"	d	file:
FILTER_UPNP_ORIGINALTRACKNUMBER	upnpsoap.c	338;"	d	file:
FILTER_UPNP_SEARCHCLASS	upnpsoap.c	339;"	d	file:
FILTER_UPNP_STORAGEUSED	upnpsoap.c	340;"	d	file:
FLAG_ALBUM	metadata.c	50;"	d	file:
FLAG_ARTIST	metadata.c	49;"	d	file:
FLAG_AUDIO_ONLY	clients.h	36;"	d
FLAG_BITRATE	metadata.c	59;"	d	file:
FLAG_BPS	metadata.c	61;"	d	file:
FLAG_CAPTION	upnphttp.h	130;"	d
FLAG_CHANNELS	metadata.c	62;"	d	file:
FLAG_CHUNKED	upnphttp.h	123;"	d
FLAG_COMMENT	metadata.c	52;"	d	file:
FLAG_CREATOR	metadata.c	53;"	d	file:
FLAG_DATE	metadata.c	54;"	d	file:
FLAG_DLNA	clients.h	26;"	d
FLAG_DLNA_PN	metadata.c	55;"	d	file:
FLAG_DURATION	metadata.c	57;"	d	file:
FLAG_FORCE_SORT	clients.h	37;"	d
FLAG_FREE_OBJECT_ID	upnpsoap.h	36;"	d
FLAG_FREQUENCY	metadata.c	60;"	d	file:
FLAG_GENRE	metadata.c	51;"	d	file:
FLAG_HOST	upnphttp.h	117;"	d
FLAG_HTML	upnphttp.h	121;"	d
FLAG_INVALID_REQ	upnphttp.h	120;"	d
FLAG_LANGUAGE	upnphttp.h	118;"	d
FLAG_MIME	metadata.c	56;"	d	file:
FLAG_MIME_AVI_AVI	clients.h	28;"	d
FLAG_MIME_AVI_DIVX	clients.h	27;"	d
FLAG_MIME_FLAC_FLAC	clients.h	29;"	d
FLAG_MIME_WAV_WAV	clients.h	30;"	d
FLAG_MS_PFS	clients.h	33;"	d
FLAG_NO_PARAMS	tivo_commands.c	130;"	d	file:
FLAG_NO_RESIZE	clients.h	32;"	d
FLAG_PLAYSPEED	upnphttp.h	126;"	d
FLAG_RANGE	upnphttp.h	116;"	d
FLAG_REALTIMEINFO	upnphttp.h	125;"	d
FLAG_RESIZE_THUMBS	clients.h	31;"	d
FLAG_RESOLUTION	metadata.c	58;"	d	file:
FLAG_ROOT_CONTAINER	upnpsoap.h	37;"	d
FLAG_ROTATION	metadata.c	63;"	d	file:
FLAG_SAMSUNG	clients.h	34;"	d
FLAG_SAMSUNG_TV	clients.h	35;"	d
FLAG_SEND_RESIZED	tivo_commands.c	129;"	d	file:
FLAG_SID	upnphttp.h	115;"	d
FLAG_TIMEOUT	upnphttp.h	114;"	d
FLAG_TIMESEEK	upnphttp.h	124;"	d
FLAG_TITLE	metadata.c	48;"	d	file:
FLAG_VIDEO	tivo_commands.c	131;"	d	file:
FLAG_XFERBACKGROUND	upnphttp.h	129;"	d
FLAG_XFERINTERACTIVE	upnphttp.h	128;"	d
FLAG_XFERSTREAMING	upnphttp.h	127;"	d
FORCE_SORT_CRITERIA	options.h	/^	FORCE_SORT_CRITERIA,		\/* force sorting by a given sort criteria *\/$/;"	e	enum:upnpconfigoptions
FRIENDLYNAME_MAX_LEN	upnpglobalvars.h	235;"	d
FileID	tagutils/tagutils-asf.h	/^	GUID FileID;$/;"	m	struct:_asf_data_object_t
FileID	tagutils/tagutils-asf.h	/^	GUID FileID;$/;"	m	struct:_asf_file_properties_t
FileID	tagutils/tagutils-asf.h	/^	GUID FileID;$/;"	m	struct:_asf_simple_index_object_t
FileProperties	tagutils/tagutils-asf.h	/^	asf_file_properties_t FileProperties;$/;"	m	struct:_asf_header_object_t
FileSize	tagutils/tagutils-asf.h	/^	__u64 FileSize;$/;"	m	struct:_asf_file_properties_t
FixedSizeSamples	tagutils/tagutils-asf.h	/^	__u32 FixedSizeSamples;$/;"	m	struct:_asf_media_stream_t
Flags	tagutils/tagutils-asf.h	/^	__u32 Flags;$/;"	m	struct:_asf_extended_stream_object_t
Flags	tagutils/tagutils-asf.h	/^	__u32 Flags;$/;"	m	struct:_asf_file_properties_t
FormatSize	tagutils/tagutils-asf.h	/^	__u16 FormatSize;$/;"	m	struct:_asf_video_stream_t
FormatSize	tagutils/tagutils-asf.h	/^	__u32 FormatSize;$/;"	m	struct:_asf_media_stream_t
FormatType	tagutils/tagutils-asf.h	/^	GUID FormatType;$/;"	m	struct:_asf_media_stream_t
GETFLAG	upnpglobalvars.h	204;"	d
GET_WAV_INT16	tagutils/tagutils-wav.c	29;"	d	file:
GET_WAV_INT32	tagutils/tagutils-wav.c	24;"	d	file:
GNET_GET_MAX	ubus.c	/^    GNET_GET_MAX,$/;"	e	enum:__anon4	file:
GNET_GET_TYPE	ubus.c	/^    GNET_GET_TYPE,$/;"	e	enum:__anon4	file:
GUID	tagutils/tagutils-asf.h	/^} __PACKED__ GUID;$/;"	t	typeref:struct:_GUID
GetAudioMetadata	metadata.c	/^GetAudioMetadata(const char *path, char *name)$/;"	f
GetCurrentConnectionIDs	upnpsoap.c	/^GetCurrentConnectionIDs(struct upnphttp * h, const char * action)$/;"	f	file:
GetCurrentConnectionIDsArgs	upnpdescgen.c	/^static const struct argument GetCurrentConnectionIDsArgs[] =$/;"	v	typeref:struct:argument	file:
GetCurrentConnectionInfo	upnpsoap.c	/^GetCurrentConnectionInfo(struct upnphttp * h, const char * action)$/;"	f	file:
GetCurrentConnectionInfoArgs	upnpdescgen.c	/^static const struct argument GetCurrentConnectionInfoArgs[] =$/;"	v	typeref:struct:argument	file:
GetFolderMetadata	metadata.c	/^GetFolderMetadata(const char *name, const char *path, const char *artist, const char *genre, int64_t album_art)$/;"	f
GetImageMetadata	metadata.c	/^GetImageMetadata(const char *path, char *name)$/;"	f
GetIsAuthorizedArgs	upnpdescgen.c	/^static const struct argument GetIsAuthorizedArgs[] =$/;"	v	typeref:struct:argument	file:
GetIsValidatedArgs	upnpdescgen.c	/^static const struct argument GetIsValidatedArgs[] =$/;"	v	typeref:struct:argument	file:
GetProtocolInfo	upnpsoap.c	/^GetProtocolInfo(struct upnphttp * h, const char * action)$/;"	f	file:
GetProtocolInfoArgs	upnpdescgen.c	/^static const struct argument GetProtocolInfoArgs[] =$/;"	v	typeref:struct:argument	file:
GetRegisterDeviceArgs	upnpdescgen.c	/^static const struct argument GetRegisterDeviceArgs[] =$/;"	v	typeref:struct:argument	file:
GetSearchCapabilities	upnpsoap.c	/^GetSearchCapabilities(struct upnphttp * h, const char * action)$/;"	f	file:
GetSearchCapabilitiesArgs	upnpdescgen.c	/^static const struct argument GetSearchCapabilitiesArgs[] =$/;"	v	typeref:struct:argument	file:
GetSortCapabilities	upnpsoap.c	/^GetSortCapabilities(struct upnphttp * h, const char * action)$/;"	f	file:
GetSortCapabilitiesArgs	upnpdescgen.c	/^static const struct argument GetSortCapabilitiesArgs[] =$/;"	v	typeref:struct:argument	file:
GetSystemUpdateID	upnpsoap.c	/^GetSystemUpdateID(struct upnphttp * h, const char * action)$/;"	f	file:
GetSystemUpdateIDArgs	upnpdescgen.c	/^static const struct argument GetSystemUpdateIDArgs[] =$/;"	v	typeref:struct:argument	file:
GetValueFromNameValueList	upnpreplyparse.c	/^GetValueFromNameValueList(struct NameValueParserData * pdata,$/;"	f
GetVideoMetadata	metadata.c	/^GetVideoMetadata(const char *path, char *name)$/;"	f
Hdr	tagutils/tagutils-asf.h	/^	asf_stream_object_t Hdr;$/;"	m	struct:_asf_audio_stream_t
Hdr	tagutils/tagutils-asf.h	/^	asf_stream_object_t Hdr;$/;"	m	struct:_asf_media_stream_t
Hdr	tagutils/tagutils-asf.h	/^	asf_stream_object_t Hdr;$/;"	m	struct:_asf_video_stream_t
HeaderExtension	tagutils/tagutils-asf.h	/^	asf_header_extension_t HeaderExtension;$/;"	m	struct:_asf_header_object_t
Height	tagutils/tagutils-asf.h	/^	__u32 Height;$/;"	m	struct:_asf_video_stream_t
HttpVer	upnphttp.h	/^	char HttpVer[16];$/;"	m	struct:upnphttp
ICONV_FATAL	tagutils/tagutils-misc.c	/^	ICONV_FATAL$/;"	e	enum:__anon6	file:
ICONV_OK	tagutils/tagutils-misc.c	/^	ICONV_OK,$/;"	e	enum:__anon6	file:
ICONV_TRYNEXT	tagutils/tagutils-misc.c	/^	ICONV_TRYNEXT,$/;"	e	enum:__anon6	file:
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_codec_list_t
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_content_description_t
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_data_object_t
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_extended_stream_object_t
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_file_properties_t
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_header_extension_t
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_header_object_t
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_object_t
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_padding_object_t
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_payload_extension_t
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_simple_index_object_t
ID	tagutils/tagutils-asf.h	/^	GUID ID;$/;"	m	struct:_asf_stream_object_t
ID	tagutils/tagutils-asf.h	/^	__u16 ID;$/;"	m	struct:_asf_stream_name_t
IFF_SLAVE	getifaddr.c	56;"	d	file:
IMAGE_ALBUM_ID	scanner.h	54;"	d
IMAGE_ALL_ID	scanner.h	52;"	d
IMAGE_CAMERA_ID	scanner.h	55;"	d
IMAGE_DATE_ID	scanner.h	53;"	d
IMAGE_DIR_ID	scanner.h	57;"	d
IMAGE_ID	scanner.h	51;"	d
IMAGE_PLIST_ID	scanner.h	56;"	d
IMAGE_RATING_ID	scanner.h	58;"	d
INITHELPER	upnpdescgen.h	71;"	d
INOTIFY_MASK	upnpglobalvars.h	197;"	d
IN_ACCESS	linux/inotify.h	27;"	d
IN_ALL_EVENTS	linux/inotify.h	57;"	d
IN_ATTRIB	linux/inotify.h	29;"	d
IN_CLOSE	linux/inotify.h	45;"	d
IN_CLOSE_NOWRITE	linux/inotify.h	31;"	d
IN_CLOSE_WRITE	linux/inotify.h	30;"	d
IN_CREATE	linux/inotify.h	35;"	d
IN_DELETE	linux/inotify.h	36;"	d
IN_DELETE_SELF	linux/inotify.h	37;"	d
IN_IGNORED	linux/inotify.h	42;"	d
IN_ISDIR	linux/inotify.h	49;"	d
IN_MODIFY	linux/inotify.h	28;"	d
IN_MOVE	linux/inotify.h	46;"	d
IN_MOVED_FROM	linux/inotify.h	33;"	d
IN_MOVED_TO	linux/inotify.h	34;"	d
IN_ONESHOT	linux/inotify.h	50;"	d
IN_OPEN	linux/inotify.h	32;"	d
IN_Q_OVERFLOW	linux/inotify.h	41;"	d
IN_UNMOUNT	linux/inotify.h	40;"	d
IS_WHITE_SPACE	minixml.h	35;"	d
IndexEntriesCount	tagutils/tagutils-asf.h	/^	__u32 IndexEntriesCount;$/;"	m	struct:_asf_simple_index_object_t
IndexEntryTimeInterval	tagutils/tagutils-asf.h	/^	__u32 IndexEntryTimeInterval;$/;"	m	struct:_asf_simple_index_object_t
Info	tagutils/tagutils-asf.h	/^	__u32 Info;$/;"	m	struct:_asf_codec_entry_t
InfoLen	tagutils/tagutils-asf.h	/^	__u16 InfoLen;$/;"	m	struct:_asf_codec_entry_t
InfoLength	tagutils/tagutils-asf.h	/^	__u32 InfoLength;$/;"	m	struct:_asf_payload_extension_t
InitialBufferFullness	tagutils/tagutils-asf.h	/^	__u32 InitialBufferFullness;$/;"	m	struct:_asf_extended_stream_object_t
IsAuthorizedValidated	upnpsoap.c	/^IsAuthorizedValidated(struct upnphttp * h, const char * action)$/;"	f	file:
IsEqualGUID	tagutils/tagutils-asf.h	40;"	d
JPEG_QUALITY	image_utils.c	52;"	d	file:
L_ARTWORK	log.h	/^  L_ARTWORK,$/;"	e	enum:_log_facility
L_DB_SQL	log.h	/^  L_DB_SQL,$/;"	e	enum:_log_facility
L_GENERAL	log.h	/^  L_GENERAL=0,$/;"	e	enum:_log_facility
L_HTTP	log.h	/^  L_HTTP,$/;"	e	enum:_log_facility
L_INOTIFY	log.h	/^  L_INOTIFY,$/;"	e	enum:_log_facility
L_MAX	log.h	/^  L_MAX$/;"	e	enum:_log_facility
L_METADATA	log.h	/^  L_METADATA,$/;"	e	enum:_log_facility
L_SCANNER	log.h	/^  L_SCANNER,$/;"	e	enum:_log_facility
L_SSDP	log.h	/^  L_SSDP,$/;"	e	enum:_log_facility
L_TIVO	log.h	/^  L_TIVO,$/;"	e	enum:_log_facility
LanguageIDIndex	tagutils/tagutils-asf.h	/^	__u16 LanguageIDIndex;$/;"	m	struct:_asf_extended_stream_object_t
Length	tagutils/tagutils-asf.h	/^	__u16 Length;$/;"	m	struct:_asf_stream_name_t
MACADDR_IS_ZERO	getifaddr.h	33;"	d
MAX_BUF	tagutils/tagutils-plist.c	33;"	d	file:
MAX_BUFFER_SIZE	upnphttp.c	90;"	d	file:
MAX_CONNECTIONS	options.h	/^	MAX_CONNECTIONS			\/* maximum number of simultaneous connections *\/$/;"	e	enum:upnpconfigoptions
MAX_EVENTS	minidlna.c	105;"	d	file:
MAX_ICONV_BUF	tagutils/tagutils-misc.c	26;"	d	file:
MAX_LAN_ADDR	minidlnatypes.h	37;"	d
MAX_OPTION_VALUE_LEN	options.h	74;"	d
MAX_RESPONSE_SIZE	upnpsoap.h	25;"	d
MAYBEFREE	tagutils/tagutils.c	154;"	d	file:
MINIDLNA_SERVER_STRING	upnphttp.h	59;"	d
MINIDLNA_VERSION	upnpglobalvars.h	60;"	d
MIN_BUFFER_SIZE	upnphttp.c	91;"	d	file:
MODELNAME_MAX_LEN	upnpglobalvars.h	211;"	d
MODELNUMBER_MAX_LEN	upnpglobalvars.h	214;"	d
MPEG_TS_PACKET_LENGTH	metadata.c	126;"	d	file:
MPEG_TS_PACKET_LENGTH_DLNA	metadata.c	127;"	d	file:
MPEG_TS_SYNC_CODE	metadata.c	125;"	d	file:
MSG_MORE	upnphttp.h	133;"	d
MUSIC_ALBUM_ARTIST_ID	scanner.h	38;"	d
MUSIC_ALBUM_ID	scanner.h	34;"	d
MUSIC_ALL_ID	scanner.h	31;"	d
MUSIC_ARTIST_ID	scanner.h	33;"	d
MUSIC_COMPOSER_ID	scanner.h	39;"	d
MUSIC_CONTRIB_ARTIST_ID	scanner.h	37;"	d
MUSIC_DIR_ID	scanner.h	36;"	d
MUSIC_GENRE_ID	scanner.h	32;"	d
MUSIC_ID	scanner.h	30;"	d
MUSIC_PLIST_ID	scanner.h	35;"	d
MUSIC_RATING_ID	scanner.h	40;"	d
MajorType	tagutils/tagutils-asf.h	/^	GUID MajorType;$/;"	m	struct:_asf_media_stream_t
MaxBitrate	tagutils/tagutils-asf.h	/^	__u32 MaxBitrate;$/;"	m	struct:_asf_file_properties_t
MaxPacketSize	tagutils/tagutils-asf.h	/^	__u32 MaxPacketSize;$/;"	m	struct:_asf_file_properties_t
MaximumObjectSize	tagutils/tagutils-asf.h	/^	__u32 MaximumObjectSize;$/;"	m	struct:_asf_extended_stream_object_t
MaximumPacketCount	tagutils/tagutils-asf.h	/^	__u32 MaximumPacketCount;$/;"	m	struct:_asf_simple_index_object_t
MediaObjectNumber	tagutils/tagutils-asf.h	/^	__u8 MediaObjectNumber;$/;"	m	struct:_asf_payload_t
MediaObjectOffset	tagutils/tagutils-asf.h	/^	__u32 MediaObjectOffset;$/;"	m	struct:_asf_payload_t
MinPacketSize	tagutils/tagutils-asf.h	/^	__u32 MinPacketSize;$/;"	m	struct:_asf_file_properties_t
NONE	metadata.h	/^	NONE,$/;"	e	enum:__anon11
NO_MEDIA	minidlnatypes.h	63;"	d
NO_PLAYLIST_MASK	upnpglobalvars.h	200;"	d
NSEC_PER_MSEC	uuid.h	32;"	d
NSEC_PER_SEC	uuid.h	29;"	d
N_LANG_ALT	tagutils/tagutils-misc.c	73;"	d	file:
N_ROLE	tagutils/tagutils.h	44;"	d
Name	tagutils/tagutils-asf.h	/^	__u32 Name;$/;"	m	struct:_asf_codec_entry_t
NameLen	tagutils/tagutils-asf.h	/^	__u16 NameLen;$/;"	m	struct:_asf_codec_entry_t
NameValue	upnpreplyparse.h	/^struct NameValue {$/;"	s
NameValueParserData	upnpreplyparse.h	/^struct NameValueParserData {$/;"	s
NameValueParserGetData	upnpreplyparse.c	/^NameValueParserGetData(void * d, const char * datas, int l)$/;"	f	file:
NameValueParserStartElt	upnpreplyparse.c	/^NameValueParserStartElt(void * d, const char * name, int l)$/;"	f	file:
New_upnphttp	upnphttp.c	/^New_upnphttp(int s)$/;"	f
NumEntries	tagutils/tagutils-asf.h	/^	__u64 NumEntries;$/;"	m	struct:_asf_codec_list_t
NumObjects	tagutils/tagutils-asf.h	/^	__u32 NumObjects;$/;"	m	struct:_asf_header_object_t
OpenAndConfMonitorSocket	getifaddr.c	/^OpenAndConfMonitorSocket(void)$/;"	f
OpenAndConfSSDPNotifySocket	minissdp.c	/^OpenAndConfSSDPNotifySocket(struct lan_addr_s *iface)$/;"	f
OpenAndConfSSDPReceiveSocket	minissdp.c	/^OpenAndConfSSDPReceiveSocket(void)$/;"	f
OpenAndConfTivoBeaconSocket	tivo_beacon.c	/^OpenAndConfTivoBeaconSocket()$/;"	f
PATH_BUF_SIZE	inotify.c	56;"	d	file:
PNPX	upnpglobalvars.h	78;"	d
PRESENTATIONURL_MAX_LEN	upnpglobalvars.h	220;"	d
PROFILE_AUDIO_AAC	metadata.c	/^	PROFILE_AUDIO_AAC,$/;"	e	enum:audio_profiles	file:
PROFILE_AUDIO_AAC_MULT5	metadata.c	/^	PROFILE_AUDIO_AAC_MULT5,$/;"	e	enum:audio_profiles	file:
PROFILE_AUDIO_AC3	metadata.c	/^	PROFILE_AUDIO_AC3,$/;"	e	enum:audio_profiles	file:
PROFILE_AUDIO_AMR	metadata.c	/^	PROFILE_AUDIO_AMR$/;"	e	enum:audio_profiles	file:
PROFILE_AUDIO_MP2	metadata.c	/^	PROFILE_AUDIO_MP2,$/;"	e	enum:audio_profiles	file:
PROFILE_AUDIO_MP3	metadata.c	/^	PROFILE_AUDIO_MP3,$/;"	e	enum:audio_profiles	file:
PROFILE_AUDIO_PCM	metadata.c	/^	PROFILE_AUDIO_PCM,$/;"	e	enum:audio_profiles	file:
PROFILE_AUDIO_UNKNOWN	metadata.c	/^	PROFILE_AUDIO_UNKNOWN,$/;"	e	enum:audio_profiles	file:
PROFILE_AUDIO_WMA_BASE	metadata.c	/^	PROFILE_AUDIO_WMA_BASE,$/;"	e	enum:audio_profiles	file:
PROFILE_AUDIO_WMA_FULL	metadata.c	/^	PROFILE_AUDIO_WMA_FULL,$/;"	e	enum:audio_profiles	file:
PROFILE_AUDIO_WMA_PRO	metadata.c	/^	PROFILE_AUDIO_WMA_PRO,$/;"	e	enum:audio_profiles	file:
PV_NAMESPACE	upnpsoap.h	33;"	d
PacketLength	tagutils/tagutils-asf.h	/^	__u32 PacketLength;$/;"	m	struct:_asf_packet_t
PaddingLength	tagutils/tagutils-asf.h	/^	__u32 PaddingLength;$/;"	m	struct:_asf_packet_t
PaddingObject	tagutils/tagutils-asf.h	/^	asf_padding_object_t PaddingObject;$/;"	m	struct:_asf_header_object_t
ParseHttpHeaders	upnphttp.c	/^ParseHttpHeaders(struct upnphttp * h)$/;"	f	file:
ParseNameValue	upnpreplyparse.c	/^ParseNameValue(const char * buffer, int bufsize,$/;"	f
ParseUPnPClient	minissdp.c	/^ParseUPnPClient(char *location)$/;"	f
Payload	tagutils/tagutils-asf.h	/^	asf_payload_t Payload;$/;"	m	struct:_asf_packet_t
PayloadExtensionSystemCount	tagutils/tagutils-asf.h	/^	__u16 PayloadExtensionSystemCount;$/;"	m	struct:_asf_extended_stream_object_t
PayloadFlags	tagutils/tagutils-asf.h	/^	__u8 PayloadFlags;$/;"	m	struct:_asf_packet_t
PayloadLength	tagutils/tagutils-asf.h	/^	__u32 PayloadLength;$/;"	m	struct:_asf_payload_t
PlayDuration	tagutils/tagutils-asf.h	/^	__u64 PlayDuration;$/;"	m	struct:_asf_file_properties_t
PrepareForConnectionArgs	upnpdescgen.c	/^static const struct argument PrepareForConnectionArgs[] =$/;"	v	typeref:struct:argument	file:
Preroll	tagutils/tagutils-asf.h	/^	__u64 Preroll;$/;"	m	struct:_asf_file_properties_t
ProcessHTTPPOST_upnphttp	upnphttp.c	/^ProcessHTTPPOST_upnphttp(struct upnphttp * h)$/;"	f	file:
ProcessHTTPSubscribe_upnphttp	upnphttp.c	/^ProcessHTTPSubscribe_upnphttp(struct upnphttp * h, const char * path)$/;"	f	file:
ProcessHTTPUnSubscribe_upnphttp	upnphttp.c	/^ProcessHTTPUnSubscribe_upnphttp(struct upnphttp * h, const char * path)$/;"	f	file:
ProcessHttpQuery_upnphttp	upnphttp.c	/^ProcessHttpQuery_upnphttp(struct upnphttp * h)$/;"	f	file:
ProcessMonitorEvent	getifaddr.c	/^ProcessMonitorEvent(int *s)$/;"	f
ProcessSSDPRequest	minissdp.c	/^ProcessSSDPRequest(struct ssdp_request *request)$/;"	f
ProcessTiVoBeacon	tivo_beacon.c	/^void ProcessTiVoBeacon(int *s)$/;"	f
ProcessTiVoCommand	tivo_commands.c	/^ProcessTiVoCommand(struct upnphttp *h, const char *orig_path)$/;"	f
Process_upnphttp	upnphttp.c	/^Process_upnphttp(struct upnphttp * h)$/;"	f
PropertyFlags	tagutils/tagutils-asf.h	/^	__u8 PropertyFlags;$/;"	m	struct:_asf_packet_t
QueryStateVariable	upnpsoap.c	/^QueryStateVariable(struct upnphttp * h, const char * action)$/;"	f	file:
RESOURCE_PROTOCOL_INFO_VALUES	upnpglobalvars.h	81;"	d
ROLE_ALBUMARTIST	tagutils/tagutils.h	39;"	d
ROLE_ARTIST	tagutils/tagutils.h	37;"	d
ROLE_BAND	tagutils/tagutils.h	40;"	d
ROLE_COMPOSER	tagutils/tagutils.h	42;"	d
ROLE_CONDUCTOR	tagutils/tagutils.h	41;"	d
ROLE_LAST	tagutils/tagutils.h	43;"	d
ROLE_NOUSE	tagutils/tagutils.h	35;"	d
ROLE_START	tagutils/tagutils.h	36;"	d
ROLE_TRACKARTIST	tagutils/tagutils.h	38;"	d
ROOTDESC_PATH	minidlnapath.h	36;"	d
ROOTDEV_MANUFACTURER	upnpdescstrings.h	39;"	d
ROOTDEV_MANUFACTURER	upnpdescstrings.h	52;"	d
ROOTDEV_MANUFACTURERURL	upnpdescstrings.h	36;"	d
ROOTDEV_MANUFACTURERURL	upnpdescstrings.h	51;"	d
ROOTDEV_MODELDESCRIPTION	upnpdescstrings.h	45;"	d
ROOTDEV_MODELDESCRIPTION	upnpdescstrings.h	54;"	d
ROOTDEV_MODELNAME	upnpdescstrings.h	42;"	d
ROOTDEV_MODELNAME	upnpdescstrings.h	53;"	d
ROOTDEV_MODELURL	upnpdescstrings.h	48;"	d
ROOTDEV_MODELURL	upnpdescstrings.h	55;"	d
ROOT_CONTAINER	options.h	/^	ROOT_CONTAINER,			\/* root ObjectID (instead of "0") *\/$/;"	e	enum:upnpconfigoptions
ROTATE_180	image_utils.h	28;"	d
ROTATE_270	image_utils.h	29;"	d
ROTATE_90	image_utils.h	27;"	d
ROTATE_NONE	image_utils.h	26;"	d
Rating	tagutils/tagutils-asf.h	/^	__u32 Rating;$/;"	m	struct:_asf_content_description_t
RatingLength	tagutils/tagutils-asf.h	/^	__u16 RatingLength;$/;"	m	struct:_asf_content_description_t
RegisterDevice	upnpsoap.c	/^RegisterDevice(struct upnphttp * h, const char * action)$/;"	f	file:
ReplicatedData	tagutils/tagutils-asf.h	/^	__u32 ReplicatedData[2];$/;"	m	struct:_asf_payload_t
ReplicatedDataLength	tagutils/tagutils-asf.h	/^	__u8 ReplicatedDataLength;$/;"	m	struct:_asf_payload_t
Reserved	tagutils/tagutils-asf.h	/^	GUID Reserved;$/;"	m	struct:_asf_codec_list_t
Reserved	tagutils/tagutils-asf.h	/^	__u16 Reserved;$/;"	m	struct:_asf_header_object_t
Reserved	tagutils/tagutils-asf.h	/^	__u32 Reserved;$/;"	m	struct:_asf_stream_object_t
Reserved	tagutils/tagutils-asf.h	/^	unsigned short Reserved;$/;"	m	struct:_asf_data_object_t
Reserved1	tagutils/tagutils-asf.h	/^	GUID Reserved1;$/;"	m	struct:_asf_header_extension_t
Reserved2	tagutils/tagutils-asf.h	/^	__u16 Reserved2;$/;"	m	struct:_asf_header_extension_t
ReservedFlags	tagutils/tagutils-asf.h	/^	__u8 ReservedFlags;$/;"	m	struct:_asf_video_stream_t
Response	upnpsoap.h	/^struct Response$/;"	s
SELECT_COLUMNS	tivo_commands.c	289;"	d	file:
SELECT_COLUMNS	upnpsoap.c	689;"	d	file:
SERIALNUMBER_MAX_LEN	upnpglobalvars.h	217;"	d
SERVER_NAME	upnpglobalvars.h	63;"	d
SERVER_NAME	upnpglobalvars.h	65;"	d
SETFLAG	upnpglobalvars.h	203;"	d
SSDP_MCAST_ADDR	minissdp.c	58;"	d	file:
SSDP_PORT	minissdp.c	57;"	d	file:
SWAP16	image_utils.c	47;"	d	file:
SWAP16	image_utils.c	49;"	d	file:
SWAP16	tagutils/tagutils-asf.h	44;"	d
SWAP16	tagutils/tagutils-asf.h	47;"	d
SWAP32	tagutils/tagutils-asf.h	43;"	d
SWAP32	tagutils/tagutils-asf.h	46;"	d
SYSTEMD_MASK	upnpglobalvars.h	201;"	d
SampleSize	tagutils/tagutils-asf.h	/^	__u32 SampleSize;$/;"	m	struct:_asf_media_stream_t
SamsungGetFeatureList	upnpsoap.c	/^SamsungGetFeatureList(struct upnphttp * h, const char * action)$/;"	f	file:
SamsungSetBookmark	upnpsoap.c	/^SamsungSetBookmark(struct upnphttp * h, const char * action)$/;"	f	file:
ScanDirectory	scanner.c	/^ScanDirectory(const char *dir, const char *parent, media_types dir_types)$/;"	f	file:
SearchArgs	upnpdescgen.c	/^static const struct argument SearchArgs[] =$/;"	v	typeref:struct:argument	file:
SearchClientCache	clients.c	/^SearchClientCache(struct in_addr addr, int quiet)$/;"	f
SearchContentDirectory	upnpsoap.c	/^SearchContentDirectory(struct upnphttp * h, const char * action)$/;"	f	file:
Send400	upnphttp.c	/^Send400(struct upnphttp * h)$/;"	f	file:
Send404	upnphttp.c	/^Send404(struct upnphttp * h)$/;"	f	file:
Send406	upnphttp.c	/^Send406(struct upnphttp * h)$/;"	f	file:
Send416	upnphttp.c	/^Send416(struct upnphttp * h)$/;"	f	file:
Send500	upnphttp.c	/^Send500(struct upnphttp * h)$/;"	f
Send501	upnphttp.c	/^Send501(struct upnphttp * h)$/;"	f
SendContainer	tivo_commands.c	/^SendContainer(struct upnphttp *h, const char *objectID, int itemStart, int itemCount, char *anchorItem,$/;"	f	file:
SendDuration	tagutils/tagutils-asf.h	/^	__u64 SendDuration;$/;"	m	struct:_asf_file_properties_t
SendFormats	tivo_commands.c	/^SendFormats(struct upnphttp *h, const char *sformat)$/;"	f	file:
SendItemDetails	tivo_commands.c	/^SendItemDetails(struct upnphttp *h, int64_t item)$/;"	f	file:
SendResp_albumArt	upnphttp.c	/^SendResp_albumArt(struct upnphttp * h, char * object)$/;"	f
SendResp_caption	upnphttp.c	/^SendResp_caption(struct upnphttp * h, char * object)$/;"	f
SendResp_dlnafile	upnphttp.c	/^SendResp_dlnafile(struct upnphttp *h, char *object)$/;"	f
SendResp_icon	upnphttp.c	/^SendResp_icon(struct upnphttp * h, char * icon)$/;"	f
SendResp_presentation	upnphttp.c	/^SendResp_presentation(struct upnphttp * h)$/;"	f	file:
SendResp_readynas_admin	upnphttp.c	/^SendResp_readynas_admin(struct upnphttp * h)$/;"	f	file:
SendResp_resizedimg	upnphttp.c	/^SendResp_resizedimg(struct upnphttp * h, char * object)$/;"	f
SendResp_thumbnail	upnphttp.c	/^SendResp_thumbnail(struct upnphttp * h, char * object)$/;"	f
SendResp_upnphttp	upnphttp.c	/^SendResp_upnphttp(struct upnphttp * h)$/;"	f
SendRootContainer	tivo_commands.c	/^SendRootContainer(struct upnphttp *h)$/;"	f	file:
SendSSDPGoodbyes	minissdp.c	/^SendSSDPGoodbyes(int s)$/;"	f
SendSSDPNotifies	minissdp.c	/^SendSSDPNotifies(int s, const char *host, unsigned short port,$/;"	f
SendSSDPResponse	minissdp.c	/^SendSSDPResponse(int s, struct sockaddr_in sockname, int st_no,$/;"	f	file:
SendTime	tagutils/tagutils-asf.h	/^	__u32 SendTime;$/;"	m	struct:_asf_packet_t
Sequence	tagutils/tagutils-asf.h	/^	__u32 Sequence;$/;"	m	struct:_asf_packet_t
Size	tagutils/tagutils-asf.h	/^	__u16 Size;$/;"	m	struct:_asf_payload_extension_t
Size	tagutils/tagutils-asf.h	/^	__u64 Size;$/;"	m	struct:_asf_codec_list_t
Size	tagutils/tagutils-asf.h	/^	__u64 Size;$/;"	m	struct:_asf_content_description_t
Size	tagutils/tagutils-asf.h	/^	__u64 Size;$/;"	m	struct:_asf_data_object_t
Size	tagutils/tagutils-asf.h	/^	__u64 Size;$/;"	m	struct:_asf_extended_stream_object_t
Size	tagutils/tagutils-asf.h	/^	__u64 Size;$/;"	m	struct:_asf_file_properties_t
Size	tagutils/tagutils-asf.h	/^	__u64 Size;$/;"	m	struct:_asf_header_extension_t
Size	tagutils/tagutils-asf.h	/^	__u64 Size;$/;"	m	struct:_asf_header_object_t
Size	tagutils/tagutils-asf.h	/^	__u64 Size;$/;"	m	struct:_asf_object_t
Size	tagutils/tagutils-asf.h	/^	__u64 Size;$/;"	m	struct:_asf_padding_object_t
Size	tagutils/tagutils-asf.h	/^	__u64 Size;$/;"	m	struct:_asf_simple_index_object_t
Size	tagutils/tagutils-asf.h	/^	__u64 Size;$/;"	m	struct:_asf_stream_object_t
SoapError	upnpsoap.c	/^SoapError(struct upnphttp * h, int errCode, const char * errDesc)$/;"	f
StartTime	tagutils/tagutils-asf.h	/^	__u64 StartTime;$/;"	m	struct:_asf_extended_stream_object_t
StreamNameCount	tagutils/tagutils-asf.h	/^	__u16 StreamNameCount;$/;"	m	struct:_asf_extended_stream_object_t
StreamNumber	tagutils/tagutils-asf.h	/^	__u16 StreamNumber;$/;"	m	struct:_asf_extended_stream_object_t
StreamNumber	tagutils/tagutils-asf.h	/^	__u16 StreamNumber;$/;"	m	struct:_asf_stream_object_t
StreamNumber	tagutils/tagutils-asf.h	/^	__u8 StreamNumber;$/;"	m	struct:_asf_payload_t
StreamType	tagutils/tagutils-asf.h	/^	GUID StreamType;$/;"	m	struct:_asf_stream_object_t
SubType	tagutils/tagutils-asf.h	/^	GUID SubType;$/;"	m	struct:_asf_media_stream_t
SubmitServicesToMiniSSDPD	minissdp.c	/^SubmitServicesToMiniSSDPD(const char *host, unsigned short port)$/;"	f
TIVO_MASK	upnpglobalvars.h	198;"	d
TPLINK	icons.c	20;"	d	file:
TYPE_AUDIO	minidlnatypes.h	64;"	d
TYPE_DIR	minidlnatypes.h	/^	TYPE_DIR,$/;"	e	enum:file_types
TYPE_FILE	minidlnatypes.h	/^	TYPE_FILE$/;"	e	enum:file_types
TYPE_IMAGES	minidlnatypes.h	66;"	d
TYPE_UNKNOWN	minidlnatypes.h	/^	TYPE_UNKNOWN,$/;"	e	enum:file_types
TYPE_VIDEO	minidlnatypes.h	65;"	d
TemporalCompression	tagutils/tagutils-asf.h	/^	__u32 TemporalCompression;$/;"	m	struct:_asf_media_stream_t
TiVoRandomSeedFunc	tivo_utils.c	/^TiVoRandomSeedFunc(sqlite3_context *context, int argc, sqlite3_value **argv)$/;"	f
TimeOffset	tagutils/tagutils-asf.h	/^	__u64 TimeOffset;$/;"	m	struct:_asf_stream_object_t
Title	tagutils/tagutils-asf.h	/^	__u32 Title;$/;"	m	struct:_asf_content_description_t
TitleLength	tagutils/tagutils-asf.h	/^	__u16 TitleLength;$/;"	m	struct:_asf_content_description_t
TotalPackets	tagutils/tagutils-asf.h	/^	__u64 TotalPackets;$/;"	m	struct:_asf_data_object_t
TotalPackets	tagutils/tagutils-asf.h	/^	__u64 TotalPackets;$/;"	m	struct:_asf_file_properties_t
Type	tagutils/tagutils-asf.h	/^	__u16 Type;$/;"	m	struct:_asf_codec_entry_t
TypeFlags	tagutils/tagutils-asf.h	/^	__u8 TypeFlags;$/;"	m	struct:_asf_packet_t
TypeSpecificSize	tagutils/tagutils-asf.h	/^	__u32 TypeSpecificSize;$/;"	m	struct:_asf_stream_object_t
UPNPALBUMART_NAMES	options.h	/^	UPNPALBUMART_NAMES,		\/* list of '\/'-delimited file names to check for album art *\/$/;"	e	enum:upnpconfigoptions
UPNPDBDIR	options.h	/^	UPNPDBDIR,			\/* base directory to store the database and album art cache *\/$/;"	e	enum:upnpconfigoptions
UPNPFRIENDLYNAME	options.h	/^	UPNPFRIENDLYNAME,		\/* how the system should show up to DLNA clients *\/$/;"	e	enum:upnpconfigoptions
UPNPIFNAME	options.h	/^	UPNPIFNAME = 1,			\/* ext_ifname *\/$/;"	e	enum:upnpconfigoptions
UPNPINOTIFY	options.h	/^	UPNPINOTIFY,			\/* enable inotify on the media directories *\/$/;"	e	enum:upnpconfigoptions
UPNPLISTENING_IP	options.h	/^	UPNPLISTENING_IP,		\/* listening_ip *\/$/;"	e	enum:upnpconfigoptions
UPNPLOGDIR	options.h	/^	UPNPLOGDIR,			\/* base directory to store the log file *\/$/;"	e	enum:upnpconfigoptions
UPNPLOGLEVEL	options.h	/^	UPNPLOGLEVEL,			\/* logging verbosity *\/$/;"	e	enum:upnpconfigoptions
UPNPMEDIADIR	options.h	/^	UPNPMEDIADIR,			\/* directory to search for UPnP-A\/V content *\/$/;"	e	enum:upnpconfigoptions
UPNPMINISSDPDSOCKET	options.h	/^	UPNPMINISSDPDSOCKET,		\/* minissdpdsocket *\/$/;"	e	enum:upnpconfigoptions
UPNPMODEL_NAME	options.h	/^	UPNPMODEL_NAME,			\/* model_name *\/$/;"	e	enum:upnpconfigoptions
UPNPMODEL_NUMBER	options.h	/^	UPNPMODEL_NUMBER,		\/* model_number *\/$/;"	e	enum:upnpconfigoptions
UPNPNOTIFY_INTERVAL	options.h	/^	UPNPNOTIFY_INTERVAL,		\/* notify_interval *\/$/;"	e	enum:upnpconfigoptions
UPNPPORT	options.h	/^	UPNPPORT,			\/* port *\/$/;"	e	enum:upnpconfigoptions
UPNPPRESENTATIONURL	options.h	/^	UPNPPRESENTATIONURL,		\/* presentation_url *\/$/;"	e	enum:upnpconfigoptions
UPNPSERIAL	options.h	/^	UPNPSERIAL,			\/* serial *\/$/;"	e	enum:upnpconfigoptions
UPNPUUID	options.h	/^	UPNPUUID,			\/* uuid *\/$/;"	e	enum:upnpconfigoptions
UPNP_INVALID	options.h	/^	UPNP_INVALID = 0,$/;"	e	enum:upnpconfigoptions
USER_ACCOUNT	options.h	/^	USER_ACCOUNT,			\/* user account to run as *\/$/;"	e	enum:upnpconfigoptions
USE_FORK	upnpglobalvars.h	68;"	d
USE_FORK	upnphttp.c	93;"	d	file:
USE_FORK	upnphttp.c	94;"	d	file:
UtoAscii	tagutils/textutils.c	/^unsigned short UtoAscii[] = {$/;"	v
UtoUpper	tagutils/textutils.c	/^unsigned short UtoUpper[] = {$/;"	v
VALID	metadata.h	/^	VALID$/;"	e	enum:__anon11
VIDEO_ACTOR_ID	scanner.h	45;"	d
VIDEO_ALL_ID	scanner.h	43;"	d
VIDEO_DIR_ID	scanner.h	48;"	d
VIDEO_GENRE_ID	scanner.h	44;"	d
VIDEO_ID	scanner.h	42;"	d
VIDEO_PLIST_ID	scanner.h	47;"	d
VIDEO_RATING_ID	scanner.h	49;"	d
VIDEO_SERIES_ID	scanner.h	46;"	d
VideoCodec	tagutils/tagutils-asf.h	/^	asf_codec_entry_t VideoCodec;$/;"	m	struct:_asf_codec_list_t
VideoStream	tagutils/tagutils-asf.h	/^	asf_video_stream_t *        VideoStream;$/;"	m	struct:_asf_header_object_t
WAVEFORMATEX	tagutils/tagutils-asf.h	/^} __PACKED__ WAVEFORMATEX;$/;"	t	typeref:struct:_WAVEFORMATEX
WINAMP_GENRE_UNKNOWN	tagutils/tagutils.c	100;"	d	file:
WMA	tagutils/tagutils.h	110;"	d
WMALSL	tagutils/tagutils.h	112;"	d
WMAPRO	tagutils/tagutils.h	111;"	d
Width	tagutils/tagutils-asf.h	/^	__u32 Width;$/;"	m	struct:_asf_video_stream_t
XMLElt	upnpdescgen.h	/^struct XMLElt {$/;"	s
XML_STORE_EMPTY_FL	upnpreplyparse.h	50;"	d
X_MS_MEDIARECEIVERREGISTRAR_CONTROLURL	minidlnapath.h	47;"	d
X_MS_MEDIARECEIVERREGISTRAR_EVENTURL	minidlnapath.h	48;"	d
X_MS_MEDIARECEIVERREGISTRAR_PATH	minidlnapath.h	46;"	d
X_MS_MediaReceiverRegistrarActions	upnpdescgen.c	/^static const struct action X_MS_MediaReceiverRegistrarActions[] =$/;"	v	typeref:struct:action	file:
X_MS_MediaReceiverRegistrarVars	upnpdescgen.c	/^static const struct stateVar X_MS_MediaReceiverRegistrarVars[] =$/;"	v	typeref:struct:stateVar	file:
_	upnpglobalvars.h	72;"	d
_	upnpglobalvars.h	74;"	d
_BITMAPINFOHEADER	tagutils/tagutils-asf.h	/^typedef struct _BITMAPINFOHEADER {$/;"	s
_GUID	tagutils/tagutils-asf.h	/^typedef struct _GUID {$/;"	s
_LINUX_INOTIFY_H	linux/inotify.h	8;"	d
_LINUX_INOTIFY_SYSCALLS_H	linux/inotify-syscalls.h	2;"	d
_SCANNER_MISC_H	tagutils/misc.h	23;"	d
_TAG_H_	tagutils/tagutils.h	28;"	d
_WAVEFORMATEX	tagutils/tagutils-asf.h	/^typedef struct _WAVEFORMATEX {$/;"	s
__ALBUMART_H__	albumart.h	25;"	d
__ARM__	minidlna.c	106;"	d	file:
__CLIENTS_H__	clients.h	19;"	d
__CODELENGTH_H__	codelength.h	7;"	d
__ERR_H__	log.h	22;"	d
__GETIFADDR_H__	getifaddr.h	30;"	d
__METADATA_H__	metadata.h	25;"	d
__MINIDLNAPATH_H__	minidlnapath.h	30;"	d
__MINIDLNATYPES_H__	minidlnatypes.h	30;"	d
__MINIDLNA_H__	minidlna.h	19;"	d
__MINISSDP_H__	minissdp.h	30;"	d
__MINIXML_H__	minixml.h	33;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	12;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	16;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	21;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	26;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	31;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	36;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	40;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	44;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	48;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	52;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	56;"	d
__NR_inotify_add_watch	linux/inotify-syscalls.h	8;"	d
__NR_inotify_init	linux/inotify-syscalls.h	11;"	d
__NR_inotify_init	linux/inotify-syscalls.h	15;"	d
__NR_inotify_init	linux/inotify-syscalls.h	20;"	d
__NR_inotify_init	linux/inotify-syscalls.h	25;"	d
__NR_inotify_init	linux/inotify-syscalls.h	30;"	d
__NR_inotify_init	linux/inotify-syscalls.h	35;"	d
__NR_inotify_init	linux/inotify-syscalls.h	39;"	d
__NR_inotify_init	linux/inotify-syscalls.h	43;"	d
__NR_inotify_init	linux/inotify-syscalls.h	47;"	d
__NR_inotify_init	linux/inotify-syscalls.h	51;"	d
__NR_inotify_init	linux/inotify-syscalls.h	55;"	d
__NR_inotify_init	linux/inotify-syscalls.h	7;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	13;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	17;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	22;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	27;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	32;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	37;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	41;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	45;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	49;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	53;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	57;"	d
__NR_inotify_rm_watch	linux/inotify-syscalls.h	9;"	d
__OPTIONS_H__	options.h	31;"	d
__PACKED__	tagutils/tagutils-asf.h	24;"	d
__PLAYLIST_H__	playlist.h	25;"	d
__PROCESS_H__	process.h	30;"	d
__SCANNER_H__	scanner.h	25;"	d
__SQL_H__	sql.h	25;"	d
__UPNPDESCGEN_H__	upnpdescgen.h	30;"	d
__UPNPDESCSTRINGS_H__	upnpdescstrings.h	30;"	d
__UPNPEVENTS_H__	upnpevents.h	49;"	d
__UPNPGLOBALVARS_H__	upnpglobalvars.h	50;"	d
__UPNPHTTP_H__	upnphttp.h	50;"	d
__UPNPREPLYPARSE_H__	upnpreplyparse.h	30;"	d
__UPNPSOAP_H__	upnpsoap.h	22;"	d
__UTILS_H__	utils.h	25;"	d
__UUID_H__	uuid.h	25;"	d
__author__	icons/str2hex.py	/^__author__ = 'zhuxianfeng@tp-link.net'$/;"	v
__s16	tagutils/misc.h	/^typedef signed short __s16;$/;"	t
__s32	tagutils/misc.h	/^typedef signed int __s32;$/;"	t
__s64	tagutils/misc.h	/^typedef signed long __s64;$/;"	t
__s64	tagutils/misc.h	/^typedef signed long long __s64;$/;"	t
__s8	tagutils/misc.h	/^typedef signed char __s8;$/;"	t
__u16	tagutils/misc.h	/^typedef unsigned short __u16;$/;"	t
__u32	tagutils/misc.h	/^typedef unsigned int __u32;$/;"	t
__u64	tagutils/misc.h	/^typedef unsigned long __u64;$/;"	t
__u64	tagutils/misc.h	/^typedef unsigned long long __u64;$/;"	t
__u8	tagutils/misc.h	/^typedef unsigned char __u8;$/;"	t
_aac_check_extended_descriptor	tagutils/tagutils-aac.c	/^_aac_check_extended_descriptor(FILE *infile)$/;"	f
_aac_findatom	tagutils/tagutils-aac.c	/^_aac_findatom(FILE *fin, long max_offset, char *which_atom, int *atom_size)$/;"	f	file:
_aac_lookforatom	tagutils/tagutils-aac.c	/^_aac_lookforatom(FILE *aac_fp, char *atom_path, unsigned int *atom_length)$/;"	f	file:
_asf_audio_stream_t	tagutils/tagutils-asf.h	/^typedef struct _asf_audio_stream_t {$/;"	s
_asf_codec_entry_t	tagutils/tagutils-asf.h	/^typedef struct _asf_codec_entry_t {$/;"	s
_asf_codec_list_t	tagutils/tagutils-asf.h	/^typedef struct _asf_codec_list_t {$/;"	s
_asf_content_description_t	tagutils/tagutils-asf.h	/^typedef struct _asf_content_description_t {$/;"	s
_asf_data_object_t	tagutils/tagutils-asf.h	/^typedef struct _asf_data_object_t {$/;"	s
_asf_extended_stream_object_t	tagutils/tagutils-asf.h	/^typedef struct _asf_extended_stream_object_t {$/;"	s
_asf_file_properties_t	tagutils/tagutils-asf.h	/^typedef struct _asf_file_properties_t {$/;"	s
_asf_header_extension_t	tagutils/tagutils-asf.h	/^typedef struct _asf_header_extension_t {$/;"	s
_asf_header_object_t	tagutils/tagutils-asf.h	/^typedef struct _asf_header_object_t {$/;"	s
_asf_load_picture	tagutils/tagutils-asf.c	/^_asf_load_picture(FILE *fp, int size, void *bm, int *bm_size)$/;"	f	file:
_asf_load_string	tagutils/tagutils-asf.c	/^_asf_load_string(FILE *fp, int type, int size, char *buf, int len)$/;"	f	file:
_asf_media_stream_t	tagutils/tagutils-asf.h	/^typedef struct _asf_media_stream_t {$/;"	s
_asf_object_t	tagutils/tagutils-asf.h	/^typedef struct _asf_object_t {$/;"	s
_asf_packet_t	tagutils/tagutils-asf.h	/^typedef struct _asf_packet_t {$/;"	s
_asf_padding_object_t	tagutils/tagutils-asf.h	/^typedef struct _asf_padding_object_t {$/;"	s
_asf_payload_extension_t	tagutils/tagutils-asf.h	/^typedef struct _asf_payload_extension_t {$/;"	s
_asf_payload_t	tagutils/tagutils-asf.h	/^typedef struct _asf_payload_t {$/;"	s
_asf_read_audio_stream	tagutils/tagutils-asf.c	/^_asf_read_audio_stream(FILE *fp, struct song_metadata *psong, int size)$/;"	f	file:
_asf_read_extended_stream_object	tagutils/tagutils-asf.c	/^_asf_read_extended_stream_object(FILE *fp, struct song_metadata *psong, __u32 size)$/;"	f	file:
_asf_read_file_properties	tagutils/tagutils-asf.c	/^_asf_read_file_properties(FILE *fp, asf_file_properties_t *p, __u32 size)$/;"	f	file:
_asf_read_header_extension	tagutils/tagutils-asf.c	/^_asf_read_header_extension(FILE *fp, struct song_metadata *psong, __u32 size)$/;"	f	file:
_asf_read_media_stream	tagutils/tagutils-asf.c	/^_asf_read_media_stream(FILE *fp, struct song_metadata *psong, __u32 size)$/;"	f	file:
_asf_read_stream_object	tagutils/tagutils-asf.c	/^_asf_read_stream_object(FILE *fp, struct song_metadata *psong, __u32 size)$/;"	f	file:
_asf_simple_index_object_t	tagutils/tagutils-asf.h	/^typedef struct _asf_simple_index_object_t {$/;"	s
_asf_stream_name_t	tagutils/tagutils-asf.h	/^typedef struct _asf_stream_name_t {$/;"	s
_asf_stream_object_t	tagutils/tagutils-asf.h	/^typedef struct _asf_stream_object_t {$/;"	s
_asf_video_stream_t	tagutils/tagutils-asf.h	/^typedef struct _asf_video_stream_t {$/;"	s
_avi_audio_format_t	tagutils/tagutils-asf.h	/^typedef struct _avi_audio_format_t {$/;"	s
_char_htoi	tagutils/textutils.c	/^_char_htoi(char h)$/;"	f	file:
_decode_mp3_frame	tagutils/tagutils-mp3.c	/^_decode_mp3_frame(unsigned char *frame, struct mp3_frameinfo *pfi)$/;"	f	file:
_get_aacfileinfo	tagutils/tagutils-aac.c	/^_get_aacfileinfo(char *file, struct song_metadata *psong)$/;"	f
_get_aactags	tagutils/tagutils-aac.c	/^_get_aactags(char *file, struct song_metadata *psong)$/;"	f	file:
_get_asffileinfo	tagutils/tagutils-asf.c	/^_get_asffileinfo(char *file, struct song_metadata *psong)$/;"	f	file:
_get_fileinfo	tagutils/tagutils.c	/^_get_fileinfo(char *file, struct song_metadata *psong)$/;"	f	file:
_get_flcfileinfo	tagutils/tagutils-flc.c	/^_get_flcfileinfo(char *filename, struct song_metadata *psong)$/;"	f	file:
_get_flctags	tagutils/tagutils-flc.c	/^_get_flctags(char *filename, struct song_metadata *psong)$/;"	f	file:
_get_mp3fileinfo	tagutils/tagutils-mp3.c	/^_get_mp3fileinfo(char *file, struct song_metadata *psong)$/;"	f	file:
_get_mp3tags	tagutils/tagutils-mp3.c	/^_get_mp3tags(char *file, struct song_metadata *psong)$/;"	f	file:
_get_oggfileinfo	tagutils/tagutils-ogg.c	/^_get_oggfileinfo(char *filename, struct song_metadata *psong)$/;"	f	file:
_get_pcmfileinfo	tagutils/tagutils-pcm.c	/^_get_pcmfileinfo(char *filename, struct song_metadata *psong)$/;"	f	file:
_get_tags	tagutils/tagutils.c	/^_get_tags(char *file, struct song_metadata *psong)$/;"	f	file:
_get_utf8_text	tagutils/tagutils-misc.c	/^_get_utf8_text(const id3_ucs4_t* native_text)$/;"	f	file:
_get_wavfileinfo	tagutils/tagutils-wav.c	/^_get_wavfileinfo(char *filename, struct song_metadata *psong)$/;"	f	file:
_get_wavtags	tagutils/tagutils-wav.c	/^_get_wavtags(char *filename, struct song_metadata *psong)$/;"	f	file:
_lang2cp	tagutils/tagutils-misc.c	/^_lang2cp(char *lang)$/;"	f	file:
_log_facility	log.h	/^enum _log_facility$/;"	g
_m3u_pls_next_track	tagutils/tagutils-plist.c	/^_m3u_pls_next_track(struct song_metadata *psong, struct stat *stat, char *lang, char *type)$/;"	f
_make_composite_tags	tagutils/tagutils.c	/^_make_composite_tags(struct song_metadata *psong)$/;"	f	file:
_mp3_get_average_bitrate	tagutils/tagutils-mp3.c	/^static void _mp3_get_average_bitrate(FILE *infile, struct mp3_frameinfo *pfi, const char *fname)$/;"	f	file:
_mp3_get_frame_count	tagutils/tagutils-mp3.c	/^_mp3_get_frame_count(FILE *infile, struct mp3_frameinfo *pfi)$/;"	f	file:
_next_track	tagutils/tagutils-plist.c	/^static int (*_next_track)(struct song_metadata*, struct stat*, char*, char*);$/;"	v	file:
_notify_start	scanner.c	/^_notify_start(void)$/;"	f	file:
_notify_stop	scanner.c	/^_notify_stop(void)$/;"	f	file:
_ogg_create_stream_set	tagutils/tagutils-ogg.c	/^_ogg_create_stream_set(void)$/;"	f	file:
_ogg_find_stream_processor	tagutils/tagutils-ogg.c	/^_ogg_find_stream_processor(ogg_stream_set *set, ogg_page *page)$/;"	f	file:
_ogg_free_stream_set	tagutils/tagutils-ogg.c	/^_ogg_free_stream_set(ogg_stream_set *set)$/;"	f	file:
_ogg_get_next_page	tagutils/tagutils-ogg.c	/^_ogg_get_next_page(FILE *f, ogg_sync_state *sync, ogg_page *page,$/;"	f	file:
_ogg_null_start	tagutils/tagutils-ogg.c	/^_ogg_null_start(ogg_stream_processor *stream)$/;"	f	file:
_ogg_other_start	tagutils/tagutils-ogg.c	/^_ogg_other_start(ogg_stream_processor *stream, char *type)$/;"	f	file:
_ogg_process_null	tagutils/tagutils-ogg.c	/^_ogg_process_null(ogg_stream_processor *stream, ogg_page *page, struct song_metadata *psong)$/;"	f	file:
_ogg_process_other	tagutils/tagutils-ogg.c	/^_ogg_process_other(ogg_stream_processor *stream, ogg_page *page, struct song_metadata *psong)$/;"	f	file:
_ogg_stream_processor	tagutils/tagutils-ogg.c	/^typedef struct _ogg_stream_processor {$/;"	s	file:
_ogg_streams_open	tagutils/tagutils-ogg.c	/^_ogg_streams_open(ogg_stream_set *set)$/;"	f	file:
_ogg_vorbis_end	tagutils/tagutils-ogg.c	/^_ogg_vorbis_end(ogg_stream_processor *stream, struct song_metadata *psong)$/;"	f	file:
_ogg_vorbis_process	tagutils/tagutils-ogg.c	/^_ogg_vorbis_process(ogg_stream_processor *stream, ogg_page *page,$/;"	f	file:
_ogg_vorbis_start	tagutils/tagutils-ogg.c	/^_ogg_vorbis_start(ogg_stream_processor *stream)$/;"	f	file:
_pick_dlna_profile	tagutils/tagutils-asf.c	/^_pick_dlna_profile(struct song_metadata *psong, uint16_t format)$/;"	f	file:
_trackno	tagutils/tagutils-plist.c	/^static int _trackno;$/;"	v	file:
_usleep	minissdp.c	/^_usleep(long usecs)$/;"	f	file:
_utf8bom	tagutils/tagutils-plist.c	/^static int _utf8bom = 0;$/;"	v	file:
aBeacon	tivo_beacon.h	/^struct aBeacon$/;"	s
aac_object_type_t	metadata.h	/^} aac_object_type_t;$/;"	t	typeref:enum:__anon10
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_member	configure	/^ac_fn_c_check_member ()$/;"	f
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_find_intX_t	configure	/^ac_fn_c_find_intX_t ()$/;"	f
ac_fn_c_find_uintX_t	configure	/^ac_fn_c_find_uintX_t ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
action	minidlna.c	/^    void (*action)(int signum);$/;"	m	struct:signal_struct	file:
action	upnpdescgen.h	/^struct action {$/;"	s
actionList	upnpdescgen.h	/^	const struct action * actionList;$/;"	m	struct:serviceDesc	typeref:struct:serviceDesc::action
add_dir_watch	inotify.c	/^int add_dir_watch(int fd, char * path, char * filename)$/;"	f
add_res	upnpsoap.c	/^add_res(char *size, char *duration, char *bitrate, char *sampleFrequency,$/;"	f	file:
add_resized_res	upnpsoap.c	/^add_resized_res(int srcw, int srch, int reqw, int reqh, char *dlna_pn,$/;"	f	file:
add_watch	inotify.c	/^add_watch(int fd, const char * path)$/;"	f
addr	clients.h	/^	struct in_addr addr;$/;"	m	struct:client_cache_s	typeref:struct:client_cache_s::in_addr
addr	minidlnatypes.h	/^	struct in_addr addr;	\/* ip *\/$/;"	m	struct:lan_addr_s	typeref:struct:lan_addr_s::in_addr
addrstr	upnpevents.c	/^	char addrstr[16];$/;"	m	struct:upnp_event_notify	file:
age	clients.h	/^	time_t age;$/;"	m	struct:client_cache_s
album	metadata.h	/^	char *album;$/;"	m	struct:metadata_s
album	tagutils/tagutils.h	/^	char *album;                            \/\/ TALB$/;"	m	struct:song_metadata
album_art_name_s	minidlnatypes.h	/^struct album_art_name_s {$/;"	s
album_art_names	upnpglobalvars.c	/^struct album_art_name_s * album_art_names = NULL;$/;"	v	typeref:struct:album_art_name_s
album_id	tagutils/tagutils.h	/^	unsigned long album_id;$/;"	m	struct:song_metadata
allocated	tagutils/tagutils-ogg.c	/^	int allocated;$/;"	m	struct:__anon8	file:
args	upnpdescgen.h	/^	const struct argument * args;$/;"	m	struct:action	typeref:struct:action::argument
argument	upnpdescgen.h	/^struct argument {$/;"	s
art_cache_exists	albumart.c	/^art_cache_exists(const char *orig_path, char **cache_file)$/;"	f	file:
artist	metadata.h	/^	char *artist;$/;"	m	struct:metadata_s
ary_options	options.c	/^struct option * ary_options = NULL;$/;"	v	typeref:struct:option
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
asf_audio_stream_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_audio_stream_t;$/;"	t	typeref:struct:_asf_audio_stream_t
asf_codec_entry_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_codec_entry_t;$/;"	t	typeref:struct:_asf_codec_entry_t
asf_codec_list_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_codec_list_t;$/;"	t	typeref:struct:_asf_codec_list_t
asf_content_description_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_content_description_t;$/;"	t	typeref:struct:_asf_content_description_t
asf_data_object_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_data_object_t;$/;"	t	typeref:struct:_asf_data_object_t
asf_extended_stream_object_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_extended_stream_object_t;$/;"	t	typeref:struct:_asf_extended_stream_object_t
asf_file_properties_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_file_properties_t;$/;"	t	typeref:struct:_asf_file_properties_t
asf_header_extension_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_header_extension_t;$/;"	t	typeref:struct:_asf_header_extension_t
asf_header_object_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_header_object_t;$/;"	t	typeref:struct:_asf_header_object_t
asf_media_stream_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_media_stream_t;$/;"	t	typeref:struct:_asf_media_stream_t
asf_object_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_object_t;$/;"	t	typeref:struct:_asf_object_t
asf_packet_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_packet_t;$/;"	t	typeref:struct:_asf_packet_t
asf_padding_object_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_padding_object_t;$/;"	t	typeref:struct:_asf_padding_object_t
asf_payload_extension_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_payload_extension_t;$/;"	t	typeref:struct:_asf_payload_extension_t
asf_payload_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_payload_t;$/;"	t	typeref:struct:_asf_payload_t
asf_simple_index_object_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_simple_index_object_t;$/;"	t	typeref:struct:_asf_simple_index_object_t
asf_stream_name_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_stream_name_t;$/;"	t	typeref:struct:_asf_stream_name_t
asf_stream_object_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_stream_object_t;$/;"	t	typeref:struct:_asf_stream_object_t
asf_video_stream_t	tagutils/tagutils-asf.h	/^} __PACKED__ asf_video_stream_t;$/;"	t	typeref:struct:_asf_video_stream_t
attfunc	minixml.h	/^	void (*attfunc) (void *, const char *, int, const char *, int);$/;"	m	struct:xmlparser
audio_offset	tagutils/tagutils.h	/^	int audio_offset;$/;"	m	struct:song_metadata
audio_profiles	metadata.c	/^enum audio_profiles {$/;"	g	file:
audio_size	tagutils/tagutils.h	/^	int audio_size;$/;"	m	struct:song_metadata
av_dict_get	metadata.c	119;"	d	file:
av_strerror	libav.h	82;"	d
avi_audio_format_t	tagutils/tagutils-asf.h	/^} __PACKED__ avi_audio_format_t;$/;"	t	typeref:struct:_avi_audio_format_t
b	tagutils/tagutils-asf.h	/^	__u8 b[8];$/;"	m	struct:_GUID
basename	tagutils/tagutils.h	/^	char *basename;                         \/\/ basename is part of path$/;"	m	struct:song_metadata
biBitCount	tagutils/tagutils-asf.h	/^	__u16 biBitCount;$/;"	m	struct:_BITMAPINFOHEADER
biClrImportant	tagutils/tagutils-asf.h	/^	__u32 biClrImportant;$/;"	m	struct:_BITMAPINFOHEADER
biClrUsed	tagutils/tagutils-asf.h	/^	__u32 biClrUsed;$/;"	m	struct:_BITMAPINFOHEADER
biCompression	tagutils/tagutils-asf.h	/^	__u32 biCompression;$/;"	m	struct:_BITMAPINFOHEADER
biHeight	tagutils/tagutils-asf.h	/^	__s32 biHeight;$/;"	m	struct:_BITMAPINFOHEADER
biPlanes	tagutils/tagutils-asf.h	/^	__u16 biPlanes;$/;"	m	struct:_BITMAPINFOHEADER
biSize	tagutils/tagutils-asf.h	/^	__u32 biSize;$/;"	m	struct:_BITMAPINFOHEADER
biSizeImage	tagutils/tagutils-asf.h	/^	__u32 biSizeImage;$/;"	m	struct:_BITMAPINFOHEADER
biWidth	tagutils/tagutils-asf.h	/^	__s32 biWidth;$/;"	m	struct:_BITMAPINFOHEADER
biXPelsPerMeter	tagutils/tagutils-asf.h	/^	__s32 biXPelsPerMeter;$/;"	m	struct:_BITMAPINFOHEADER
biYPelsPerMeter	tagutils/tagutils-asf.h	/^	__s32 biYPelsPerMeter;$/;"	m	struct:_BITMAPINFOHEADER
bitrate	metadata.h	/^	char *bitrate;$/;"	m	struct:metadata_s
bitrate	tagutils/tagutils-mp3.h	/^	int bitrate;                            \/\/ unit=kbps$/;"	m	struct:mp3_frameinfo
bitrate	tagutils/tagutils.h	/^	int bitrate;$/;"	m	struct:song_metadata
bitrate_tbl	tagutils/tagutils-mp3.h	/^static int bitrate_tbl[5][16] = {$/;"	v
blockalignment	tagutils/tagutils.h	/^	int blockalignment;$/;"	m	struct:song_metadata
bmi	tagutils/tagutils-asf.h	/^	BITMAPINFOHEADER bmi;$/;"	m	struct:_asf_video_stream_t
bpm	tagutils/tagutils.h	/^	int bpm;                                \/\/ TBPM$/;"	m	struct:song_metadata
bps	metadata.h	/^	char *bps;$/;"	m	struct:metadata_s
buf	image_utils.c	/^	JOCTET *buf;$/;"	m	struct:my_dst_mgr	file:
buf	image_utils.h	/^	pix     *buf;$/;"	m	struct:__anon2
buffer	upnpevents.c	/^    char * buffer;$/;"	m	struct:upnp_event_notify	file:
buffersize	upnpevents.c	/^    int buffersize;$/;"	m	struct:upnp_event_notify	file:
bytes	tagutils/tagutils-ogg.c	/^	ogg_int64_t bytes;$/;"	m	struct:__anon9	file:
callback	tivo_commands.c	/^callback(void *args, int argc, char **argv, char **azColName)$/;"	f	file:
callback	upnpevents.c	/^	char callback[];$/;"	m	struct:subscriber	file:
callback	upnpsoap.c	/^callback(void *args, int argc, char **argv, char **azColName)$/;"	f	file:
cbSize	tagutils/tagutils-asf.h	/^	__u16 cbSize;$/;"	m	struct:_WAVEFORMATEX
cbSize	tagutils/tagutils-asf.h	/^	__u16 cbSize;$/;"	m	struct:_avi_audio_format_t
channels	metadata.h	/^	char *channels;$/;"	m	struct:metadata_s
channels	tagutils/tagutils.h	/^	int channels;$/;"	m	struct:song_metadata
charcat	upnpsoap.c	/^charcat(struct string_s *str, char c)$/;"	f
check_db	minidlna.c	/^check_db(sqlite3 *db, int new_db, pid_t *scanner_pid)$/;"	f	file:
check_embedded_art	albumart.c	/^check_embedded_art(const char *path, const char *image_data, int image_size)$/;"	f
check_event	upnphttp.c	/^check_event(struct upnphttp *h)$/;"	f	file:
check_for_album_file	albumart.c	/^check_for_album_file(const char *path)$/;"	f	file:
check_for_captions	metadata.c	/^check_for_captions(const char *path, int64_t detailID)$/;"	f
client	upnpsoap.h	/^	enum client_types client;$/;"	m	struct:Response	typeref:enum:Response::client_types
client_cache_s	clients.h	/^struct client_cache_s {$/;"	s
client_type_s	clients.h	/^struct client_type_s {$/;"	s
client_types	clients.c	/^struct client_type_s client_types[] =$/;"	v	typeref:struct:client_type_s
client_types	clients.h	/^enum client_types {$/;"	g
clientaddr	upnphttp.h	/^	struct in_addr clientaddr;	\/* client address *\/$/;"	m	struct:upnphttp	typeref:struct:upnphttp::in_addr
clients	clients.c	/^struct client_cache_s clients[CLIENT_CACHE_SLOTS];$/;"	v	typeref:struct:client_cache_s
clock_seq	uuid.c	/^static uint32_t clock_seq;$/;"	v	file:
clock_seq_initialized	uuid.c	/^static int clock_seq_initialized;$/;"	v	file:
clock_seq_max	uuid.c	/^static const uint32_t clock_seq_max = 0x3fff; \/* 14 bits *\/$/;"	v	file:
comment	metadata.h	/^	char *comment;$/;"	m	struct:metadata_s
comment	tagutils/tagutils.h	/^	char *comment;                          \/\/ COMM$/;"	m	struct:song_metadata
compilation	tagutils/tagutils.h	/^	char compilation;                       \/\/ YTCP$/;"	m	struct:song_metadata
constraint_violated	tagutils/tagutils-ogg.c	/^	int constraint_violated;$/;"	m	struct:_ogg_stream_processor	file:
contributor	tagutils/tagutils.h	/^	char *contributor[N_ROLE];              \/\/ TPE1  (artist)$/;"	m	struct:song_metadata
contributor_id	tagutils/tagutils.h	/^	unsigned long contributor_id[N_ROLE];$/;"	m	struct:song_metadata
contributor_sort	tagutils/tagutils.h	/^	char *contributor_sort[N_ROLE];$/;"	m	struct:song_metadata
cookie	linux/inotify.h	/^	__u32		cookie;		\/* cookie to synchronize two events *\/$/;"	m	struct:inotify_event
cpnames	tagutils/tagutils-misc.c	/^	char *cpnames[N_LANG_ALT];$/;"	m	struct:__anon7	file:
cpu_to_be32	tagutils/misc.c	/^cpu_to_be32(__u32 cpu32)$/;"	f
crc_protected	tagutils/tagutils-mp3.h	/^	int crc_protected;                      \/\/ flag$/;"	m	struct:mp3_frameinfo
create_albumArtTable_sqlite	scanner_sqlite.h	/^char create_albumArtTable_sqlite[] = "CREATE TABLE ALBUM_ART ("$/;"	v
create_bookmarkTable_sqlite	scanner_sqlite.h	/^char create_bookmarkTable_sqlite[] = "CREATE TABLE BOOKMARKS ("$/;"	v
create_captionTable_sqlite	scanner_sqlite.h	/^char create_captionTable_sqlite[] = "CREATE TABLE CAPTIONS ("$/;"	v
create_detailTable_sqlite	scanner_sqlite.h	/^char create_detailTable_sqlite[] = "CREATE TABLE DETAILS ("$/;"	v
create_objectTable_sqlite	scanner_sqlite.h	/^char create_objectTable_sqlite[] = "CREATE TABLE OBJECTS ("$/;"	v
create_playlistTable_sqlite	scanner_sqlite.h	/^char create_playlistTable_sqlite[] = "CREATE TABLE PLAYLISTS ("$/;"	v
create_settingsTable_sqlite	scanner_sqlite.h	/^char create_settingsTable_sqlite[] = "CREATE TABLE SETTINGS ("$/;"	v
creator	metadata.h	/^	char *creator;$/;"	m	struct:metadata_s
curelt	upnpreplyparse.h	/^    char curelt[64];$/;"	m	struct:NameValueParserData
data	minidlna.h	/^    void *data;$/;"	m	struct:event_handler
data	minidlnatypes.h	/^	char *data; \/\/ ptr to start of memory area$/;"	m	struct:string_s
data	minixml.h	/^	void * data;$/;"	m	struct:xmlparser
data	tagutils/tagutils-ogg.c	/^	void *data;$/;"	m	struct:_ogg_stream_processor	file:
data	upnpdescgen.h	/^	const char * data;	\/* Value *\/$/;"	m	struct:XMLElt
datafunc	minixml.h	/^	void (*datafunc) (void *, const char *, int);$/;"	m	struct:xmlparser
date	metadata.h	/^	char *date;$/;"	m	struct:metadata_s
db	upnpglobalvars.c	/^sqlite3 *db;$/;"	v
db_path	upnpglobalvars.c	/^char db_path[PATH_MAX] = {'\\0'};$/;"	v
db_upgrade	sql.c	/^db_upgrade(sqlite3 *db)$/;"	f
decodeString	tivo_utils.c	/^decodeString(char *string, int inplace)$/;"	f
decodeString	tivo_utils.h	45;"	d
default_log_level	log.c	/^static int default_log_level = E_WARN;$/;"	v	file:
dir	upnpdescgen.h	/^	unsigned char dir;		\/* 1 = in, 2 = out *\/$/;"	m	struct:argument
dirpath	tagutils/tagutils.h	/^	char *dirpath;$/;"	m	struct:song_metadata
disc	tagutils/tagutils.h	/^	int disc;                               \/\/ TPOS$/;"	m	struct:song_metadata
dlna_pn	metadata.h	/^	char *dlna_pn;$/;"	m	struct:metadata_s
dlna_pn	tagutils/tagutils.h	/^	char *dlna_pn;				\/\/ DLNA Profile Name$/;"	m	struct:song_metadata
dlna_timestamp_is_present	metadata.c	/^dlna_timestamp_is_present(const char *filename, int *raw_packet_size)$/;"	f
do_iconv	tagutils/tagutils-misc.c	/^do_iconv(const char* to_ces, const char* from_ces,$/;"	f	file:
doneheaders	tagutils/tagutils-ogg.c	/^	int doneheaders;$/;"	m	struct:__anon9	file:
duration	metadata.h	/^	char *duration;$/;"	m	struct:metadata_s
ebih	tagutils/tagutils-asf.h	/^	__u8 ebih[1];$/;"	m	struct:_asf_video_stream_t
eltname	upnpdescgen.h	/^	const char * eltname;	\/* begin with '\/' if no child *\/$/;"	m	struct:XMLElt
end	tagutils/tagutils-ogg.c	/^	int end;$/;"	m	struct:_ogg_stream_processor	file:
endeltfunc	minixml.h	/^	void (*endeltfunc) (void *, const char *, int);$/;"	m	struct:xmlparser
ends_with	utils.c	/^ends_with(const char * haystack, const char * needle)$/;"	f
entries	upnphttp.h	/^	LIST_ENTRY(upnphttp) entries;$/;"	m	struct:upnphttp
entries	upnpreplyparse.h	/^    LIST_ENTRY(NameValue) entries;$/;"	m	struct:NameValue
eoi_buffer	image_utils.c	/^	JOCTET eoi_buffer[2];$/;"	m	struct:my_src_mgr	file:
epollfd	minidlna.c	/^static int epollfd;$/;"	v	file:
escape_tag	utils.c	/^escape_tag(const char *tag, int force_alloc)$/;"	f
event	upnpevents.c	/^    struct event_struct *event;$/;"	m	struct:upnp_event_notify	typeref:struct:upnp_event_notify::event_struct	file:
event	upnphttp.h	/^    struct event_struct *event;$/;"	m	struct:upnphttp	typeref:struct:upnphttp::event_struct
event_ctl	minidlna.c	/^int event_ctl(struct event_struct *evt, int opt, int evts)$/;"	f
event_del	minidlna.c	/^int event_del(struct event_struct *evt)$/;"	f
event_free	minidlna.c	/^event_free(struct event_struct *evt)$/;"	f
event_handler	minidlna.h	/^struct event_handler$/;"	s
event_malloc	minidlna.c	/^event_malloc(int sock)$/;"	f
event_struct	minidlna.h	/^struct event_struct$/;"	s
event_type	upnphttp.c	/^enum event_type {$/;"	g	file:
facility_name	log.c	/^char *facility_name[] = {$/;"	v
fd	upnphttp.c	/^    int fd;$/;"	m	struct:send_chain	file:
fetch_string_txt	tagutils/textutils.c	/^fetch_string_txt(char *fname, char *lang, int n, ...)$/;"	f
fget_byte	tagutils/misc.c	/^fget_byte(FILE *fp)$/;"	f
fget_le16	tagutils/misc.c	/^fget_le16(FILE *fp)$/;"	f
fget_le32	tagutils/misc.c	/^fget_le32(FILE *fp)$/;"	f
file_size	tagutils/tagutils.h	/^	int file_size;$/;"	m	struct:song_metadata
file_types	minidlnatypes.h	/^enum file_types {$/;"	g
fill_input_buffer	image_utils.c	/^fill_input_buffer(j_decompress_ptr cinfo)$/;"	f	file:
fill_playlists	playlist.c	/^fill_playlists()$/;"	f
filter	upnpsoap.h	/^	uint32_t filter;$/;"	m	struct:Response
filter_a	scanner.c	/^filter_a(scan_filter *d)$/;"	f	file:
filter_ap	scanner.c	/^filter_ap(scan_filter *d)$/;"	f	file:
filter_av	scanner.c	/^filter_av(scan_filter *d)$/;"	f	file:
filter_avp	scanner.c	/^filter_avp(scan_filter *d)$/;"	f	file:
filter_hidden	scanner.c	/^filter_hidden(scan_filter *d)$/;"	f	file:
filter_p	scanner.c	/^filter_p(scan_filter *d)$/;"	f	file:
filter_type	scanner.c	/^filter_type(scan_filter *d)$/;"	f	file:
filter_v	scanner.c	/^filter_v(scan_filter *d)$/;"	f	file:
filter_vp	scanner.c	/^filter_vp(scan_filter *d)$/;"	f	file:
find_album_art	albumart.c	/^find_album_art(const char *path, const char *image_data, int image_size)$/;"	f
findendheaders	upnphttp.c	/^findendheaders(const char * s, int len)$/;"	f	file:
firstgranulepos	tagutils/tagutils-ogg.c	/^	ogg_int64_t firstgranulepos;$/;"	m	struct:__anon9	file:
flags	clients.h	/^	uint32_t flags;$/;"	m	struct:client_type_s
flags	minixml.h	/^	uint32_t flags;$/;"	m	struct:xmlparser
flags	tagutils/tagutils.c	/^	unsigned char flags;$/;"	m	struct:id3header	file:
flags	upnpsoap.h	/^	uint32_t flags;$/;"	m	struct:Response
force_sort_criteria	upnpglobalvars.c	/^const char *force_sort_criteria = NULL;$/;"	v
fp	tagutils/tagutils-plist.c	/^static FILE *fp = 0;$/;"	v	file:
frame_length	tagutils/tagutils-mp3.h	/^	int frame_length;                       \/\/ bytes$/;"	m	struct:mp3_frameinfo
frame_offset	tagutils/tagutils-mp3.h	/^	int frame_offset;$/;"	m	struct:mp3_frameinfo
free_metadata	metadata.c	/^free_metadata(metadata_t *m, uint32_t flags)$/;"	f
freeoptions	options.c	/^freeoptions(void)$/;"	f
freetags	tagutils/tagutils.c	/^freetags(struct song_metadata *psong)$/;"	f
frequency	metadata.h	/^	char *frequency;$/;"	m	struct:metadata_s
friendly_name	testupnpdescgen.c	/^char friendly_name[] = "localhost: system_type";$/;"	v
friendly_name	upnpglobalvars.c	/^char friendly_name[FRIENDLYNAME_MAX_LEN];$/;"	v
genConnectionManager	upnpdescgen.c	/^genConnectionManager(int * len)$/;"	f
genContentDirectory	upnpdescgen.c	/^genContentDirectory(int * len)$/;"	f
genEventVars	upnpdescgen.c	/^genEventVars(int * len, const struct serviceDesc * s, const char * servns)$/;"	f	file:
genRootDesc	upnpdescgen.c	/^genRootDesc(int * len)$/;"	f
genRootDescSamsung	upnpdescgen.c	/^genRootDescSamsung(int * len)$/;"	f
genServiceDesc	upnpdescgen.c	/^genServiceDesc(int * len, const struct serviceDesc * s)$/;"	f	file:
genXML	upnpdescgen.c	/^genXML(char * str, int * len, int * tmplen,$/;"	f	file:
genX_MS_MediaReceiverRegistrar	upnpdescgen.c	/^genX_MS_MediaReceiverRegistrar(int * len)$/;"	f
gen_dir_hash	playlist.c	/^gen_dir_hash(const char *path)$/;"	f	file:
genable	minidlnatypes.h	/^    uint8_t genable;        \/* guest network enable *\/$/;"	m	struct:media_dir_s
generate_uuid	uuid.c	/^generate_uuid(unsigned char uuid_out[16])$/;"	f
genre	metadata.h	/^	char *genre;$/;"	m	struct:metadata_s
genre	tagutils/tagutils.h	/^	char *genre;                            \/\/ TCON$/;"	m	struct:song_metadata
genre_id	tagutils/tagutils.h	/^	unsigned long genre_id;$/;"	m	struct:song_metadata
getBcastAddress	tivo_beacon.c	/^getBcastAddress(void)$/;"	f
getVarsConnectionManager	upnpdescgen.c	/^getVarsConnectionManager(int * l)$/;"	f
getVarsContentDirectory	upnpdescgen.c	/^getVarsContentDirectory(int * l)$/;"	f
getVarsX_MS_MediaReceiverRegistrar	upnpdescgen.c	/^getVarsX_MS_MediaReceiverRegistrar(int * l)$/;"	f
get_fileinfo	tagutils/tagutils.c	/^	int (*get_fileinfo)(char* file, struct song_metadata* psong);$/;"	m	struct:__anon5	file:
get_next_available_id	scanner.c	/^get_next_available_id(const char *table, const char *parentID)$/;"	f
get_path_from_wd	inotify.c	/^char *get_path_from_wd(int wd)$/;"	f
get_pix	image_utils.c	/^get_pix(image_s *pimage, int32_t x, int32_t y)$/;"	f
get_remote_mac	getifaddr.c	/^get_remote_mac(struct in_addr ip_addr, unsigned char *mac)$/;"	f
get_tags	tagutils/tagutils.c	/^	int (*get_tags)(char* file, struct song_metadata* psong);$/;"	m	struct:__anon5	file:
get_uuid_string	uuid.c	/^get_uuid_string(char *buf)$/;"	f
getfriendlyname	minidlna.c	/^getfriendlyname(char *buf, int len)$/;"	f	file:
getifaddr	getifaddr.c	/^getifaddr(const char *ifname)$/;"	f	file:
getifaddr	testupnpdescgen.c	/^int getifaddr(const char * ifname, char * buf, int len)$/;"	f
getsyshwaddr	getifaddr.c	/^getsyshwaddr(char *buf, int len)$/;"	f
gnet_data_cb	ubus.c	/^gnet_data_cb(struct ubus_request *req, int type, struct blob_attr *msg)$/;"	f	file:
gnet_is_guest	ubus.c	/^int gnet_is_guest(int ipaddr, int *guest)$/;"	f
gnet_resp	ubus.c	/^struct gnet_resp$/;"	s	file:
gnet_ubus_exit	ubus.c	/^void gnet_ubus_exit()$/;"	f
gnet_ubus_init	ubus.c	/^int gnet_ubus_init()$/;"	f
grouping	tagutils/tagutils.h	/^	char *grouping;                         \/\/ TIT1$/;"	m	struct:song_metadata
guest_net	ubus.c	/^    int guest_net;$/;"	m	struct:gnet_resp	file:
guest_network_enable	upnpsoap.c	/^int guest_network_enable(struct upnphttp *req, const char *path)$/;"	f
handler	minidlna.h	/^    EVENT_HANDLER handler;$/;"	m	struct:event_handler
head	upnpreplyparse.h	/^    LIST_HEAD(listhead, NameValue) head;$/;"	m	struct:NameValueParserData
height	image_utils.h	/^	int32_t height;$/;"	m	struct:__anon2
httpCommands	upnphttp.h	/^enum httpCommands {$/;"	g
i	tivo_utils.h	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType
iallowedlist	upnpdescgen.h	/^	unsigned char iallowedlist;	\/* index in allowed values list *\/$/;"	m	struct:stateVar
iconv_map	tagutils/tagutils-misc.c	/^} iconv_map[] = {$/;"	v	typeref:struct:__anon7
iconv_result	tagutils/tagutils-misc.c	/^} iconv_result;$/;"	t	typeref:enum:__anon6	file:
id	options.c	/^	enum upnpconfigoptions id;$/;"	m	struct:__anon1	typeref:enum:__anon1::upnpconfigoptions	file:
id	options.h	/^	enum upnpconfigoptions id;$/;"	m	struct:option	typeref:enum:option::upnpconfigoptions
id	tagutils/tagutils.c	/^	unsigned char id[3];$/;"	m	struct:id3header	file:
id3_version	tagutils/tagutils-mp3.h	/^	short id3_version;$/;"	m	struct:mp3_frameinfo
id3header	tagutils/tagutils.c	/^struct id3header {$/;"	s	file:
idefault	upnpdescgen.h	/^	unsigned char idefault;	\/* default value *\/$/;"	m	struct:stateVar
identity	tivo_beacon.h	/^   char * identity;$/;"	m	struct:aBeacon
ieventvalue	upnpdescgen.h	/^	unsigned char ieventvalue;	\/* fixed value returned or magical values *\/$/;"	m	struct:stateVar
iface	upnphttp.h	/^	int iface;$/;"	m	struct:upnphttp
iface	upnpsoap.h	/^	int iface;$/;"	m	struct:Response
ifaces	minidlnatypes.h	/^	char *ifaces[MAX_LAN_ADDR];	\/* list of configured network interfaces *\/$/;"	m	struct:runtime_vars_s
ifindex	minidlnatypes.h	/^	unsigned int ifindex;	\/* interface index *\/$/;"	m	struct:lan_addr_s
image	tagutils/tagutils.h	/^	char *image;                            \/\/ coverart$/;"	m	struct:song_metadata
image_downsize	image_utils.c	/^image_downsize(image_s * pdest, image_s * psrc, int32_t width, int32_t height)$/;"	f
image_free	image_utils.c	/^image_free(image_s *pimage)$/;"	f
image_get_jpeg_date_xmp	image_utils.c	/^image_get_jpeg_date_xmp(const char * path, char ** date)$/;"	f
image_get_jpeg_resolution	image_utils.c	/^image_get_jpeg_resolution(const char * path, int * width, int * height)$/;"	f
image_new	image_utils.c	/^image_new(int32_t width, int32_t height)$/;"	f
image_new_from_jpeg	image_utils.c	/^image_new_from_jpeg(const char * path, int is_file, const char * buf, int size, int scale, int rotate)$/;"	f
image_resize	image_utils.c	/^image_resize(image_s * src_image, int32_t width, int32_t height)$/;"	f
image_s	image_utils.h	/^} image_s;$/;"	t	typeref:struct:__anon2
image_save_to_jpeg_buf	image_utils.c	/^image_save_to_jpeg_buf(image_s * pimage, int * size)$/;"	f
image_save_to_jpeg_file	image_utils.c	/^image_save_to_jpeg_file(image_s * pimage, char * path)$/;"	f
image_size	tagutils/tagutils.h	/^	int image_size;$/;"	m	struct:song_metadata
image_upsize	image_utils.c	/^image_upsize(image_s * pdest, image_s * psrc, int32_t width, int32_t height)$/;"	f
in_headers	tagutils/tagutils-ogg.c	/^	int in_headers;$/;"	m	struct:__anon8	file:
init	minidlna.c	/^init(int argc, char **argv)$/;"	f	file:
init_clockseq	uuid.c	/^init_clockseq(void)$/;"	f
init_source	image_utils.c	/^init_source(j_decompress_ptr cinfo)$/;"	f	file:
inotify_add_watch	linux/inotify-syscalls.h	/^static inline int inotify_add_watch (int fd, const char *name, __u32 mask)$/;"	f
inotify_create_watches	inotify.c	/^inotify_create_watches(int fd)$/;"	f
inotify_dentry_parent_queue_event	linux/inotify.h	/^static inline void inotify_dentry_parent_queue_event(struct dentry *dentry,$/;"	f
inotify_event	linux/inotify.h	/^struct inotify_event {$/;"	s
inotify_get_cookie	linux/inotify.h	/^static inline u32 inotify_get_cookie(void)$/;"	f
inotify_init	linux/inotify-syscalls.h	/^static inline int inotify_init (void)$/;"	f
inotify_inode_is_dead	linux/inotify.h	/^static inline void inotify_inode_is_dead(struct inode *inode)$/;"	f
inotify_inode_queue_event	linux/inotify.h	/^static inline void inotify_inode_queue_event(struct inode *inode,$/;"	f
inotify_insert_directory	inotify.c	/^inotify_insert_directory(int fd, char *name, const char * path)$/;"	f
inotify_insert_file	inotify.c	/^inotify_insert_file(char * name, const char * path)$/;"	f
inotify_remove_directory	inotify.c	/^inotify_remove_directory(int fd, const char * path)$/;"	f
inotify_remove_file	inotify.c	/^inotify_remove_file(const char * path)$/;"	f
inotify_remove_watches	inotify.c	/^inotify_remove_watches(int fd)$/;"	f
inotify_rm_watch	linux/inotify-syscalls.h	/^static inline int inotify_rm_watch (int fd, __u32 wd)$/;"	f
inotify_unmount_inodes	linux/inotify.h	/^static inline void inotify_unmount_inodes(struct list_head *list)$/;"	f
insert_container	scanner.c	/^insert_container(const char *item, const char *rootParent, const char *refID, const char *class,$/;"	f
insert_containers	scanner.c	/^insert_containers(const char *name, const char *path, const char *refID, const char *class, int64_t detailID)$/;"	f	file:
insert_directory	scanner.c	/^insert_directory(const char *name, const char *path, const char *base, const char *parentID, int objectID)$/;"	f
insert_file	scanner.c	/^insert_file(char *name, const char *path, const char *parentID, int object)$/;"	f
insert_playlist	playlist.c	/^insert_playlist(const char * path, char * name)$/;"	f
isInit	tivo_utils.h	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType
is_album_art	utils.c	/^is_album_art(const char * name)$/;"	f
is_audio	utils.c	/^is_audio(const char * file)$/;"	f
is_image	utils.c	/^is_image(const char * file)$/;"	f
is_playlist	utils.c	/^is_playlist(const char * file)$/;"	f
is_plist	tagutils/tagutils.h	/^	int is_plist;$/;"	m	struct:song_metadata
is_tivo_file	tivo_utils.c	/^is_tivo_file(const char *path)$/;"	f
is_valid	tagutils/tagutils-mp3.h	/^	int is_valid;$/;"	m	struct:mp3_frameinfo
is_video	utils.c	/^is_video(const char * file)$/;"	f
isillegal	tagutils/tagutils-ogg.c	/^	int isillegal;$/;"	m	struct:_ogg_stream_processor	file:
isnew	tagutils/tagutils-ogg.c	/^	int isnew;$/;"	m	struct:_ogg_stream_processor	file:
itype	upnpdescgen.h	/^	unsigned char itype;	\/* MSB: sendEvent flag, 7 LSB: index in upnptypes *\/$/;"	m	struct:stateVar
j	tivo_utils.h	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType
jdst	image_utils.c	/^	struct jpeg_destination_mgr jdst;$/;"	m	struct:my_dst_mgr	typeref:struct:my_dst_mgr::jpeg_destination_mgr	file:
jpeg_lrg	icons.c	/^unsigned char jpeg_lrg[] = $/;"	v
jpeg_memory_dest	image_utils.c	/^jpeg_memory_dest(j_compress_ptr cinfo, struct my_dst_mgr *dst)$/;"	f	file:
jpeg_memory_src	image_utils.c	/^jpeg_memory_src(j_decompress_ptr cinfo, const unsigned char * buffer, size_t bufsize)$/;"	f
jpeg_sm	icons.c	/^unsigned char jpeg_sm[] = $/;"	v
known_service_types	minissdp.c	/^static const char * const known_service_types[] =$/;"	v	file:
l	tagutils/tagutils-asf.h	/^	__u32 l;$/;"	m	struct:_GUID
l_blob_buf	ubus.c	/^static struct blob_buf l_blob_buf;$/;"	v	typeref:struct:blob_buf	file:
l_gnet_init	ubus.c	/^static int l_gnet_init;$/;"	v	file:
l_gnet_resp	ubus.c	/^static struct gnet_resp l_gnet_resp;$/;"	v	typeref:struct:gnet_resp	file:
l_resp_policy	ubus.c	/^static struct blobmsg_policy l_resp_policy[GNET_GET_MAX] = $/;"	v	typeref:struct:blobmsg_policy	file:
l_ubus_ctx	ubus.c	/^static struct ubus_context *l_ubus_ctx;$/;"	v	typeref:struct:ubus_context	file:
lan_addr	upnpglobalvars.c	/^struct lan_addr_s lan_addr[MAX_LAN_ADDR];$/;"	v	typeref:struct:lan_addr_s
lan_addr_s	minidlnatypes.h	/^struct lan_addr_s {$/;"	s
lang	tagutils/tagutils-misc.c	/^	char *lang;$/;"	m	struct:__anon7	file:
lang_index	tagutils/tagutils-misc.c	/^static int lang_index = -1;$/;"	v	file:
lastSeen	tivo_beacon.h	/^   time_t lastSeen;$/;"	m	struct:aBeacon
lastgranulepos	tagutils/tagutils-ogg.c	/^	ogg_int64_t lastgranulepos;$/;"	m	struct:__anon9	file:
lastwatch	inotify.c	/^static struct watch *lastwatch = NULL;$/;"	v	typeref:struct:watch	file:
lav_close	metadata.c	/^lav_close(AVFormatContext *ctx)$/;"	f	file:
lav_open	metadata.c	/^lav_open(AVFormatContext **ctx, const char *filename)$/;"	f	file:
layer	tagutils/tagutils-mp3.h	/^	int layer;                              \/\/ 1,2,3$/;"	m	struct:mp3_frameinfo
le16_to_cpu	tagutils/misc.c	/^le16_to_cpu(__u16 le16)$/;"	f
le32_to_cpu	tagutils/misc.c	/^le32_to_cpu(__u32 le32)$/;"	f
le64_to_cpu	tagutils/misc.c	/^le64_to_cpu(__u64 le64)$/;"	f
len	linux/inotify.h	/^	__u32		len;		\/* length (including nulls) of name *\/$/;"	m	struct:inotify_event
level_name	log.c	/^char *level_name[] = {$/;"	v
libjpeg_error_handler	image_utils.c	/^libjpeg_error_handler(j_common_ptr cinfo)$/;"	f	file:
libjpeg_error_handler	metadata.c	/^libjpeg_error_handler(j_common_ptr cinfo)$/;"	f	file:
log_close	log.c	/^log_close(void)$/;"	f
log_err	log.c	/^log_err(int level, enum _log_facility facility, char *fname, int lineno, char *fmt, ...)$/;"	f
log_fp	log.c	/^static FILE *log_fp = NULL;$/;"	v	file:
log_init	log.c	/^log_init(const char *fname, const char *debug)$/;"	f
log_level	log.c	/^int log_level[L_MAX];$/;"	v
log_path	upnpglobalvars.c	/^char log_path[PATH_MAX] = {'\\0'};$/;"	v
lossless	tagutils/tagutils.h	/^	int lossless;$/;"	m	struct:song_metadata
lostseq	tagutils/tagutils-ogg.c	/^	int lostseq;$/;"	m	struct:_ogg_stream_processor	file:
mac	clients.h	/^	unsigned char mac[6];$/;"	m	struct:client_cache_s
machine	tivo_beacon.h	/^   char * machine;$/;"	m	struct:aBeacon
main	config.guess	/^		main()$/;"	f
main	config.guess	/^	main ()$/;"	f
main	config.guess	/^main ()$/;"	f
main	icons/str2hex.py	/^def main():$/;"	f
main	minidlna.c	/^main(int argc, char **argv)$/;"	f
main	testupnpdescgen.c	/^main(int argc, char * * argv)$/;"	f
make_dir	utils.c	/^make_dir(char * path, mode_t mode)$/;"	f
mask	linux/inotify.h	/^	__u32		mask;		\/* watch mask *\/$/;"	m	struct:inotify_event
mask	minidlnatypes.h	/^	struct in_addr mask;	\/* netmask *\/$/;"	m	struct:lan_addr_s	typeref:struct:lan_addr_s::in_addr
match	clients.h	/^	const char *match;$/;"	m	struct:client_type_s
match_type	clients.h	/^	enum match_types match_type;$/;"	m	struct:client_type_s	typeref:enum:client_type_s::match_types
match_types	clients.h	/^enum match_types {$/;"	g
max_bitrate	tagutils/tagutils.h	/^	int max_bitrate;$/;"	m	struct:song_metadata
max_connections	minidlnatypes.h	/^	int max_connections;	\/* max number of simultaneous conenctions *\/$/;"	m	struct:runtime_vars_s
media_dir_s	minidlnatypes.h	/^struct media_dir_s {$/;"	s
media_dirs	upnpglobalvars.c	/^struct media_dir_s * media_dirs = NULL;$/;"	v	typeref:struct:media_dir_s
media_types	minidlnatypes.h	/^typedef uint8_t media_types;$/;"	t
metadata_s	metadata.h	/^typedef struct metadata_s {$/;"	s
metadata_t	metadata.h	/^} metadata_t;$/;"	t	typeref:struct:metadata_s
methodImpl	upnpsoap.c	/^	void (*methodImpl)(struct upnphttp *, const char *);$/;"	m	struct:__anon3	file:
methodName	upnpsoap.c	/^	const char * methodName; $/;"	m	struct:__anon3	file:
mime	metadata.h	/^	char *mime;$/;"	m	struct:metadata_s
mime	tagutils/tagutils.h	/^	char *mime;				\/\/ MIME type$/;"	m	struct:song_metadata
mime_to_ext	utils.c	/^mime_to_ext(const char * mime)$/;"	f
minissdpdsocketpath	upnpglobalvars.c	/^const char * minissdpdsocketpath = "\/var\/run\/minissdpd.sock";$/;"	v
modelname	testupnpdescgen.c	/^char modelname[] = "MiniDLNA";$/;"	v
modelname	upnpglobalvars.c	/^char modelname[MODELNAME_MAX_LEN] = ROOTDEV_MODELNAME;$/;"	v
modelnumber	testupnpdescgen.c	/^char modelnumber[] = "1";$/;"	v
modelnumber	upnpglobalvars.c	/^char modelnumber[MODELNUMBER_MAX_LEN] = MINIDLNA_VERSION;$/;"	v
modifyString	utils.c	/^modifyString(char * string, const char * before, const char * after)$/;"	f
monitor_init	getifaddr.c	/^int monitor_init()$/;"	f
monotonic_us	uuid.c	/^monotonic_us(void)$/;"	f
mp3_frameinfo	tagutils/tagutils-mp3.h	/^struct mp3_frameinfo {$/;"	s
mpeg_version	tagutils/tagutils-mp3.h	/^	short mpeg_version;$/;"	m	struct:mp3_frameinfo
musicbrainz_albumartistid	tagutils/tagutils.h	/^	char *musicbrainz_albumartistid;$/;"	m	struct:song_metadata
musicbrainz_albumid	tagutils/tagutils.h	/^	char *musicbrainz_albumid;$/;"	m	struct:song_metadata
musicbrainz_artistid	tagutils/tagutils.h	/^	char *musicbrainz_artistid;$/;"	m	struct:song_metadata
musicbrainz_trackid	tagutils/tagutils.h	/^	char *musicbrainz_trackid;$/;"	m	struct:song_metadata
my_dst_mgr	image_utils.c	/^struct my_dst_mgr {$/;"	s	file:
my_dst_mgr_empty	image_utils.c	/^my_dst_mgr_empty(j_compress_ptr cinfo)$/;"	f	file:
my_dst_mgr_init	image_utils.c	/^my_dst_mgr_init(j_compress_ptr cinfo)$/;"	f	file:
my_dst_mgr_term	image_utils.c	/^my_dst_mgr_term(j_compress_ptr cinfo)$/;"	f	file:
my_src_mgr	image_utils.c	/^my_src_mgr$/;"	s	file:
nAvgBytesPerSec	tagutils/tagutils-asf.h	/^	__u32 nAvgBytesPerSec;$/;"	m	struct:_WAVEFORMATEX
nAvgBytesPerSec	tagutils/tagutils-asf.h	/^	__u32 nAvgBytesPerSec;$/;"	m	struct:_avi_audio_format_t
nBlockAlign	tagutils/tagutils-asf.h	/^	__u16 nBlockAlign;$/;"	m	struct:_WAVEFORMATEX
nBlockAlign	tagutils/tagutils-asf.h	/^	__u16 nBlockAlign;$/;"	m	struct:_avi_audio_format_t
nChannels	tagutils/tagutils-asf.h	/^	__u16 nChannels;$/;"	m	struct:_WAVEFORMATEX
nChannels	tagutils/tagutils-asf.h	/^	__u16 nChannels;$/;"	m	struct:_avi_audio_format_t
nSamplesPerSec	tagutils/tagutils-asf.h	/^	__u32 nSamplesPerSec;$/;"	m	struct:_WAVEFORMATEX
nSamplesPerSec	tagutils/tagutils-asf.h	/^	__u32 nSamplesPerSec;$/;"	m	struct:_avi_audio_format_t
n_lan_addr	upnpglobalvars.c	/^int n_lan_addr = 0;$/;"	v
name	clients.h	/^	const char *name;$/;"	m	struct:client_type_s
name	linux/inotify.h	/^	char		name[0];	\/* stub for possible name *\/$/;"	m	struct:inotify_event
name	minidlnatypes.h	/^	char *name;             \/* base path *\/$/;"	m	struct:album_art_name_s
name	options.c	/^	const char * name;$/;"	m	struct:__anon1	file:
name	scanner.c	/^	char name[256];$/;"	m	struct:virtual_item	file:
name	upnpdescgen.h	/^	const char * name;		\/* the name of the argument *\/$/;"	m	struct:argument
name	upnpdescgen.h	/^	const char * name;$/;"	m	struct:action
name	upnpdescgen.h	/^	const char * name;$/;"	m	struct:stateVar
name	upnpreplyparse.h	/^    char name[64];$/;"	m	struct:NameValue
newSubscriber	upnpevents.c	/^newSubscriber(const char * eventurl, const char * callback, int callbacklen)$/;"	f	file:
next	inotify.c	/^	struct watch *next;$/;"	m	struct:watch	typeref:struct:watch::watch	file:
next	minidlnatypes.h	/^	struct album_art_name_s *next;$/;"	m	struct:album_art_name_s	typeref:struct:album_art_name_s::album_art_name_s
next	minidlnatypes.h	/^ 	struct media_dir_s *next;$/;"	m	struct:media_dir_s	typeref:struct:media_dir_s::media_dir_s
next	tivo_beacon.h	/^   struct aBeacon *next;$/;"	m	struct:aBeacon	typeref:struct:aBeacon::aBeacon
next_highest	inotify.c	/^next_highest(unsigned int num)$/;"	f
next_pl_fill	inotify.c	/^static time_t next_pl_fill = 0;$/;"	v	file:
next_plist_track	tagutils/tagutils-plist.c	/^next_plist_track(struct song_metadata *psong, struct stat *stat, char *lang, char *type)$/;"	f
notify	upnpevents.c	/^	struct upnp_event_notify * notify;$/;"	m	struct:subscriber	typeref:struct:subscriber::upnp_event_notify	file:
notify_interval	minidlnatypes.h	/^	int notify_interval;	\/* seconds between SSDP announces *\/$/;"	m	struct:runtime_vars_s
notify_state_enum	upnpevents.c	/^enum notify_state_enum$/;"	g	file:
num	tagutils/tagutils-ogg.c	/^	int num;$/;"	m	struct:_ogg_stream_processor	file:
num_options	options.c	/^int num_options = 0;$/;"	v
number_of_children	process.c	/^static int number_of_children = 0;$/;"	v	file:
number_of_frames	tagutils/tagutils-mp3.h	/^	int number_of_frames;$/;"	m	struct:mp3_frameinfo
objectID	scanner.c	/^	int64_t objectID;$/;"	m	struct:virtual_item	file:
off	image_utils.c	/^	JOCTET *off;$/;"	m	struct:my_dst_mgr	file:
off	minidlnatypes.h	/^	size_t off;$/;"	m	struct:string_s
offset	upnphttp.c	/^    off_t offset;$/;"	m	struct:send_chain	file:
ogg_misc_vorbis_info	tagutils/tagutils-ogg.c	/^} ogg_misc_vorbis_info;$/;"	t	typeref:struct:__anon9	file:
ogg_stream_processor	tagutils/tagutils-ogg.c	/^} ogg_stream_processor;$/;"	t	typeref:struct:_ogg_stream_processor	file:
ogg_stream_set	tagutils/tagutils-ogg.c	/^} ogg_stream_set;$/;"	t	typeref:struct:__anon8	file:
open_db	minidlna.c	/^open_db(sqlite3 **sq3)$/;"	f	file:
option	options.h	/^struct option$/;"	s
optionids	options.c	/^} optionids[] = {$/;"	v	typeref:struct:__anon1	file:
os	tagutils/tagutils-ogg.c	/^	ogg_stream_state os;$/;"	m	struct:_ogg_stream_processor	file:
padding	tagutils/tagutils-mp3.h	/^	int padding;                            \/\/ flag$/;"	m	struct:mp3_frameinfo
parentID	scanner.c	/^	char parentID[64];$/;"	m	struct:virtual_item	file:
parse_nfo	metadata.c	/^parse_nfo(const char *path, metadata_t *m)$/;"	f
parse_search_criteria	upnpsoap.c	/^parse_search_criteria(const char *str, char *sep)$/;"	f	file:
parse_sort_criteria	upnpsoap.c	/^parse_sort_criteria(char *sortCriteria, int *error)$/;"	f
parseatt	minixml.c	/^int parseatt(struct xmlparser * p)$/;"	f
parsed	ubus.c	/^    int parsed;$/;"	m	struct:gnet_resp	file:
parseelt	minixml.c	/^void parseelt(struct xmlparser * p)$/;"	f
parsexml	minixml.c	/^void parsexml(struct xmlparser * parser)$/;"	f
path	inotify.c	/^	char *path;	\/* watched path *\/$/;"	m	struct:watch	file:
path	minidlnatypes.h	/^ 	char *path;             \/* base path *\/$/;"	m	struct:media_dir_s
path	tagutils/tagutils.h	/^	char *path;$/;"	m	struct:song_metadata
path	upnpevents.c	/^	const char * path;$/;"	m	struct:upnp_event_notify	file:
pidfilename	upnpglobalvars.c	/^const char *pidfilename = "\/var\/run\/minidlna\/minidlna.pid";$/;"	v
pix	image_utils.h	/^typedef uint32_t pix;$/;"	t
plist_id	tagutils/tagutils.h	/^	int plist_id;$/;"	m	struct:song_metadata
plist_position	tagutils/tagutils.h	/^	int plist_position;$/;"	m	struct:song_metadata
png_lrg	icons.c	/^unsigned char png_lrg[] = $/;"	v
png_sm	icons.c	/^unsigned char png_sm[] = $/;"	v
pnpx_hwid	testupnpdescgen.c	/^char pnpx_hwid[] = "VEN_01F2&amp;DEV_0101&amp;REV_01 VEN_0033&amp;DEV_0001&amp;REV_01";$/;"	v
pnpx_hwid	upnpglobalvars.c	/^char pnpx_hwid[] = "VEN_0000&amp;DEV_0000&amp;REV_01 VEN_0033&amp;DEV_0001&amp;REV_01";$/;"	v
port	minidlnatypes.h	/^	int port;	\/* HTTP Port *\/$/;"	m	struct:runtime_vars_s
port	minissdp.h	/^    unsigned short port;$/;"	m	struct:ssdp_request
portstr	upnpevents.c	/^	char portstr[8];$/;"	m	struct:upnp_event_notify	file:
presentationurl	testupnpdescgen.c	/^char presentationurl[] = "http:\/\/192.168.0.1:8080\/";$/;"	v
presentationurl	upnpglobalvars.c	/^char presentationurl[PRESENTATIONURL_MAX_LEN];$/;"	v
process_check_if_running	process.c	/^process_check_if_running(const char *fname)$/;"	f
process_daemonize	process.c	/^process_daemonize(void)$/;"	f
process_end	tagutils/tagutils-ogg.c	/^	void (*process_end)(struct _ogg_stream_processor *, struct song_metadata *);$/;"	m	struct:_ogg_stream_processor	file:
process_fork	process.c	/^process_fork(void)$/;"	f
process_handle_child_termination	process.c	/^process_handle_child_termination(int signal)$/;"	f
process_page	tagutils/tagutils-ogg.c	/^	void (*process_page)(struct _ogg_stream_processor *, ogg_page *, struct song_metadata *);$/;"	m	struct:_ogg_stream_processor	file:
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
pub	image_utils.c	/^	struct jpeg_source_mgr pub;$/;"	m	struct:my_src_mgr	typeref:struct:my_src_mgr::jpeg_source_mgr	file:
put_pix_alpha_replace	image_utils.c	/^put_pix_alpha_replace(image_s *pimage, int32_t x, int32_t y, pix col)$/;"	f
quitting	upnpglobalvars.c	/^volatile short int quitting = 0;$/;"	v
rcvBeaconMessage	tivo_beacon.c	/^rcvBeaconMessage(char *beacon)$/;"	f
read	minidlna.h	/^    struct event_handler read;$/;"	m	struct:event_struct	typeref:struct:event_struct::event_handler
read_bootid_node	uuid.c	/^read_bootid_node(unsigned char *buf, size_t size)$/;"	f
read_random_bytes	uuid.c	/^read_random_bytes(unsigned char *buf, size_t size)$/;"	f	file:
readoptionsfile	options.c	/^readoptionsfile(const char * fname)$/;"	f
readtags	tagutils/tagutils.c	/^readtags(char *path, struct song_metadata *psong, struct stat *stat, char *lang, char *type)$/;"	f
register_dump	minidlna.c	/^register_dump(struct sigcontext *sigctx)$/;"	f	file:
relatedVar	upnpdescgen.h	/^	unsigned char relatedVar;	\/* index of the related variable *\/$/;"	m	struct:argument
reload_ifaces	getifaddr.c	/^reload_ifaces(int force_notify)$/;"	f
remove_watch	inotify.c	/^remove_watch(int fd, const char * path)$/;"	f
renewSubscription	upnpevents.c	/^renewSubscription(const char * sid, int sidlen, int timeout)$/;"	f
req	upnpsoap.h	/^    struct upnphttp *req;$/;"	m	struct:Response	typeref:struct:Response::upnphttp
req_Callback	upnphttp.h	/^	const char * req_Callback;	\/* For SUBSCRIBE *\/$/;"	m	struct:upnphttp
req_CallbackLen	upnphttp.h	/^	int req_CallbackLen;$/;"	m	struct:upnphttp
req_NT	upnphttp.h	/^	const char * req_NT;$/;"	m	struct:upnphttp
req_NTLen	upnphttp.h	/^	int req_NTLen;$/;"	m	struct:upnphttp
req_RangeEnd	upnphttp.h	/^	off_t req_RangeEnd;$/;"	m	struct:upnphttp
req_RangeStart	upnphttp.h	/^	off_t req_RangeStart;$/;"	m	struct:upnphttp
req_SID	upnphttp.h	/^	const char * req_SID;		\/* For UNSUBSCRIBE *\/$/;"	m	struct:upnphttp
req_SIDLen	upnphttp.h	/^	int req_SIDLen;$/;"	m	struct:upnphttp
req_Timeout	upnphttp.h	/^	int req_Timeout;$/;"	m	struct:upnphttp
req_buf	upnphttp.h	/^	char * req_buf;$/;"	m	struct:upnphttp
req_buflen	upnphttp.h	/^	int req_buflen;$/;"	m	struct:upnphttp
req_chunklen	upnphttp.h	/^	long int req_chunklen;$/;"	m	struct:upnphttp
req_client	upnphttp.h	/^	enum client_types req_client;$/;"	m	struct:upnphttp	typeref:enum:upnphttp::client_types
req_command	upnphttp.h	/^	enum httpCommands req_command;$/;"	m	struct:upnphttp	typeref:enum:upnphttp::httpCommands
req_contentlen	upnphttp.h	/^	int req_contentlen;$/;"	m	struct:upnphttp
req_contentoff	upnphttp.h	/^	int req_contentoff;     \/* header length *\/$/;"	m	struct:upnphttp
req_soapAction	upnphttp.h	/^	const char * req_soapAction;$/;"	m	struct:upnphttp
req_soapActionLen	upnphttp.h	/^	int req_soapActionLen;$/;"	m	struct:upnphttp
reqflags	upnphttp.h	/^	uint32_t reqflags;$/;"	m	struct:upnphttp
requested	upnpsoap.h	/^	int requested;$/;"	m	struct:Response
res_buf	upnphttp.h	/^	char * res_buf;$/;"	m	struct:upnphttp
res_buf_alloclen	upnphttp.h	/^	int res_buf_alloclen;$/;"	m	struct:upnphttp
res_buflen	upnphttp.h	/^	int res_buflen;$/;"	m	struct:upnphttp
resolution	metadata.h	/^	char *resolution;$/;"	m	struct:metadata_s
resolve_unknown_type	utils.c	/^resolve_unknown_type(const char * path, media_types dir_type)$/;"	f
respflags	upnphttp.h	/^	uint32_t respflags;$/;"	m	struct:upnphttp
returned	upnpsoap.h	/^	int returned;$/;"	m	struct:Response
rlimit_init	minidlna.c	/^static int rlimit_init()$/;"	f	file:
rootDesc	upnpdescgen.c	/^static const struct XMLElt rootDesc[] =$/;"	v	typeref:struct:XMLElt	file:
root_container	minidlnatypes.h	/^	char *root_container;	\/* root ObjectID (instead of "0") *\/$/;"	m	struct:runtime_vars_s
root_device	upnpdescgen.c	/^static const char root_device[] = $/;"	v	file:
root_service	upnpdescgen.c	/^static const char root_service[] =$/;"	v	file:
rotation	metadata.h	/^	char *rotation;$/;"	m	struct:metadata_s
runtime_flags	upnpglobalvars.c	/^uint32_t runtime_flags = INOTIFY_MASK;$/;"	v
runtime_vars	upnpglobalvars.c	/^struct runtime_vars_s runtime_vars;$/;"	v	typeref:struct:runtime_vars_s
runtime_vars_s	minidlnatypes.h	/^struct runtime_vars_s {$/;"	s
s	tivo_utils.h	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType
s	upnpevents.c	/^    int s;  \/* socket *\/$/;"	m	struct:upnp_event_notify	file:
safe_atoi	tagutils/textutils.c	/^safe_atoi(char *s)$/;"	f
sample_rate_tbl	tagutils/tagutils-mp3.h	/^static int sample_rate_tbl[3][4] = {$/;"	v
samplerate	tagutils/tagutils-mp3.h	/^	int samplerate;                         \/\/ samp\/sec$/;"	m	struct:mp3_frameinfo
samplerate	tagutils/tagutils.h	/^	int samplerate;$/;"	m	struct:song_metadata
samples_per_frame	tagutils/tagutils-mp3.h	/^	int samples_per_frame;                  \/\/ calculated$/;"	m	struct:mp3_frameinfo
samplesize	tagutils/tagutils.h	/^	int samplesize;$/;"	m	struct:song_metadata
save_resized_album_art	albumart.c	/^save_resized_album_art(image_s *imsrc, const char *path)$/;"	f	file:
sbeacon	tivo_beacon.c	/^static int sbeacon = -1;$/;"	v	file:
scan_filter	scanner.c	/^typedef const struct dirent scan_filter;$/;"	t	typeref:struct:dirent	file:
scan_filter	scanner.c	/^typedef struct dirent scan_filter;$/;"	t	typeref:struct:dirent	file:
scanning	upnpglobalvars.c	/^short int scanning = 0;$/;"	v
scpdConnectionManager	upnpdescgen.c	/^static const struct serviceDesc scpdConnectionManager =$/;"	v	typeref:struct:serviceDesc	file:
scpdContentDirectory	upnpdescgen.c	/^static const struct serviceDesc scpdContentDirectory =$/;"	v	typeref:struct:serviceDesc	file:
scpdX_MS_MediaReceiverRegistrar	upnpdescgen.c	/^static const struct serviceDesc scpdX_MS_MediaReceiverRegistrar =$/;"	v	typeref:struct:serviceDesc	file:
seedRandomByte	tivo_utils.c	/^seedRandomByte(uint32_t seed)$/;"	f	file:
seedRandomness	tivo_utils.c	/^seedRandomness(int n, void *pbuf, uint32_t seed)$/;"	f
sendBeaconMessage	tivo_beacon.c	/^sendBeaconMessage(struct sockaddr_in * client, int len, int broadcast)$/;"	f
sendXMLdesc	upnphttp.c	/^sendXMLdesc(struct upnphttp * h, char * (f)(int *))$/;"	f	file:
send_chain	upnphttp.c	/^struct send_chain $/;"	s	file:
send_chain_cb	upnphttp.c	/^send_chain_cb(struct send_chain *chain)$/;"	f	file:
send_data	upnphttp.c	/^send_data(struct upnphttp * h, char * header, size_t size, int flags)$/;"	f	file:
send_file	upnphttp.c	/^send_file(struct upnphttp * h, int sendfd, off_t offset, off_t end_offset)$/;"	f	file:
sent	upnpevents.c	/^    int sent;$/;"	m	struct:upnp_event_notify	file:
seq	upnpevents.c	/^	uint32_t seq;$/;"	m	struct:subscriber	file:
seqno	tagutils/tagutils-ogg.c	/^	long seqno;$/;"	m	struct:_ogg_stream_processor	file:
serial	tagutils/tagutils-ogg.c	/^	ogg_uint32_t serial;$/;"	m	struct:_ogg_stream_processor	file:
serialnumber	testupnpdescgen.c	/^char serialnumber[] = "12345678";$/;"	v
serialnumber	upnpglobalvars.c	/^char serialnumber[SERIALNUMBER_MAX_LEN] = "00000000";$/;"	v
service	upnpevents.c	/^	enum subscriber_service_enum service;$/;"	m	struct:subscriber	typeref:enum:subscriber::subscriber_service_enum	file:
serviceDesc	upnpdescgen.h	/^struct serviceDesc {$/;"	s
serviceStateTable	upnpdescgen.h	/^	const struct stateVar * serviceStateTable;$/;"	m	struct:serviceDesc	typeref:struct:serviceDesc::stateVar
set_filter_flags	upnpsoap.c	/^set_filter_flags(char *filter, struct upnphttp *h)$/;"	f	file:
set_startup_time	minidlna.c	/^set_startup_time(void)$/;"	f	file:
setjmp_buffer	image_utils.c	/^jmp_buf setjmp_buffer;$/;"	v
setjmp_buffer	metadata.c	/^jmp_buf setjmp_buffer;$/;"	v
shownillegal	tagutils/tagutils-ogg.c	/^	int shownillegal;$/;"	m	struct:_ogg_stream_processor	file:
shttpl	upnphttp.c	/^static int shttpl = -1;$/;"	v	file:
sigexit	minidlna.c	/^sigexit(int signum)$/;"	f	file:
sighup	minidlna.c	/^sighup(int sig)$/;"	f	file:
signal_handler	minidlna.c	/^signal_handler(int signum, siginfo_t *siginfo, void *context)$/;"	f	file:
signal_struct	minidlna.c	/^struct signal_struct $/;"	s	file:
signals	minidlna.c	/^static struct signal_struct signals[] = $/;"	v	typeref:struct:signal_struct	file:
signame	minidlna.c	/^    char *signame;$/;"	m	struct:signal_struct	file:
signum	minidlna.c	/^    int signum;$/;"	m	struct:signal_struct	file:
sigterm	minidlna.c	/^sigterm(int sig)$/;"	f	file:
sigusr1	minidlna.c	/^sigusr1(int sig)$/;"	f	file:
size	minidlnatypes.h	/^	size_t size;$/;"	m	struct:string_s
size	tagutils/tagutils.c	/^	unsigned char size[4];$/;"	m	struct:id3header	file:
size	upnphttp.c	/^    off_t size;$/;"	m	struct:send_chain	file:
skip_input_data	image_utils.c	/^skip_input_data(j_decompress_ptr cinfo, long num_bytes)$/;"	f	file:
skipspaces	tagutils/textutils.c	/^skipspaces(const char *str)$/;"	f
snotify	minidlnatypes.h	/^	int snotify;	\/* notify socket *\/$/;"	m	struct:lan_addr_s
soapMethods	upnpsoap.c	/^soapMethods[] =$/;"	v	typeref:struct:__anon3	file:
sock	minidlna.h	/^    int sock;$/;"	m	struct:event_struct
sock	minissdp.h	/^    int sock;$/;"	m	struct:ssdp_request
socket	upnphttp.h	/^	int socket;$/;"	m	struct:upnphttp
song_length	tagutils/tagutils.h	/^	int song_length;                        \/\/ TLEN$/;"	m	struct:song_metadata
song_metadata	tagutils/tagutils.h	/^struct song_metadata {$/;"	s
sql_exec	sql.c	/^sql_exec(sqlite3 *db, const char *fmt, ...)$/;"	f
sql_get_int_field	sql.c	/^sql_get_int_field(sqlite3 *db, const char *fmt, ...)$/;"	f
sql_get_table	sql.c	/^sql_get_table(sqlite3 *db, const char *sql, char ***pazResult, int *pnRow, int *pnColumn)$/;"	f
sql_get_text_field	sql.c	/^sql_get_text_field(sqlite3 *db, const char *fmt, ...)$/;"	f
sqlite3Prng	tivo_utils.h	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType
sqlite3PrngType	tivo_utils.h	/^struct sqlite3PrngType {$/;"	s
sqlite3_malloc	sql.h	30;"	d
sqlite3_prepare_v2	sql.h	33;"	d
sqlite3_threadsafe	minidlna.c	102;"	d	file:
ssdp_exit	minissdp.c	/^void ssdp_exit()$/;"	f
ssdp_init	minissdp.c	/^int ssdp_init(int port)$/;"	f
ssdp_request	minissdp.h	/^struct ssdp_request$/;"	s
ssdpreq	minissdp.c	/^static struct ssdp_request ssdpreq;$/;"	v	typeref:struct:ssdp_request	file:
sssdp	minissdp.c	/^static int sssdp = -1;$/;"	v	file:
start	tagutils/tagutils-ogg.c	/^	int start;$/;"	m	struct:_ogg_stream_processor	file:
start	upnpsoap.h	/^	int start;$/;"	m	struct:Response
start_inotify	inotify.c	/^start_inotify()$/;"	f
start_plist	tagutils/tagutils-plist.c	/^start_plist(const char *path, struct song_metadata *psong, struct stat *stat, char *lang, char *type)$/;"	f
start_scanner	scanner.c	/^start_scanner()$/;"	f
starteltfunc	minixml.h	/^	void (*starteltfunc) (void *, const char *, int);$/;"	m	struct:xmlparser
startup_time	upnpglobalvars.c	/^time_t startup_time = 0;$/;"	v
state	upnpevents.c	/^    enum notify_state_enum state;$/;"	m	struct:upnp_event_notify	typeref:enum:upnp_event_notify::notify_state_enum	file:
state	upnphttp.h	/^	int state;$/;"	m	struct:upnphttp
stateVar	upnpdescgen.h	/^struct stateVar {$/;"	s
stereo	tagutils/tagutils-mp3.h	/^	int stereo;                             \/\/ flag$/;"	m	struct:mp3_frameinfo
str	minidlnatypes.h	/^	char str[16];	\/* example: 192.168.0.1 *\/$/;"	m	struct:lan_addr_s
str	upnpsoap.h	/^	struct string_s *str;$/;"	m	struct:Response	typeref:struct:Response::string_s
str1	testupnpdescgen.c	/^const char * str1 = "Prefix123String";$/;"	v
str2	testupnpdescgen.c	/^const char * str2 = "123String";$/;"	v
str2hex	icons/str2hex.py	/^def str2hex(path):$/;"	f
strcasestrc	utils.c	/^strcasestrc(const char *s, const char *p, const char t)$/;"	f
strcat_char	upnpdescgen.c	/^strcat_char(char * str, int * len, int * tmplen, char c)$/;"	f	file:
strcat_str	upnpdescgen.c	/^strcat_str(char * str, int * len, int * tmplen, const char * s2)$/;"	f	file:
strcatf	utils.c	/^strcatf(struct string_s *str, const char *fmt, ...)$/;"	f
streams	tagutils/tagutils-ogg.c	/^	ogg_stream_processor *streams;$/;"	m	struct:__anon8	file:
string_s	minidlnatypes.h	/^struct string_s {$/;"	s
strip_ext	utils.c	/^strip_ext(char * name)$/;"	f
strncpyt	utils.c	/^strncpyt(char *dst, const char *src, size_t len)$/;"	f
strstrc	utils.c	/^strstrc(const char *s, const char *p, const char t)$/;"	f
stupid_test	testupnpdescgen.c	/^void stupid_test()$/;"	f
sub	upnpevents.c	/^    struct subscriber * sub;$/;"	m	struct:upnp_event_notify	typeref:struct:upnp_event_notify::subscriber	file:
subscriber	upnpevents.c	/^struct subscriber {$/;"	s	file:
subscriber_service_enum	upnpevents.h	/^enum subscriber_service_enum $/;"	g
sys_sendfile	sendfile.h	/^int sys_sendfile(int sock, int sendfd, off_t *offset, off_t len)$/;"	f
sz	image_utils.c	/^	size_t sz;$/;"	m	struct:my_dst_mgr	file:
taghandler	tagutils/tagutils.c	/^} taghandler;$/;"	t	typeref:struct:__anon5	file:
taghandlers	tagutils/tagutils.c	/^static taghandler taghandlers[] = {$/;"	v	file:
tagversion	tagutils/tagutils.h	/^	char *tagversion;$/;"	m	struct:song_metadata
term_source	image_utils.c	/^term_source(j_decompress_ptr cinfo)$/;"	f	file:
time_modified	tagutils/tagutils.h	/^	int time_modified;$/;"	m	struct:song_metadata
timeout	upnpevents.c	/^	time_t timeout;$/;"	m	struct:subscriber	file:
title	metadata.h	/^	char *title;$/;"	m	struct:metadata_s
title	tagutils/tagutils.h	/^	char *title;                            \/\/ TIT2$/;"	m	struct:song_metadata
tivo_exit	tivo_beacon.c	/^void tivo_exit()$/;"	f
tivo_init	tivo_beacon.c	/^int tivo_init()$/;"	f
tivo_unescape_tag	tivo_commands.c	/^tivo_unescape_tag(char *tag)$/;"	f	file:
tosend	upnpevents.c	/^	int tosend;$/;"	m	struct:upnp_event_notify	file:
total_discs	tagutils/tagutils.h	/^	int total_discs;                        \/\/ TPOS$/;"	m	struct:song_metadata
total_tracks	tagutils/tagutils.h	/^	int total_tracks;                       \/\/ TRCK$/;"	m	struct:song_metadata
track	tagutils/tagutils.h	/^	int track;                              \/\/ TRCK$/;"	m	struct:song_metadata
track_id	tagutils/tagutils.h	/^	unsigned long track_id;$/;"	m	struct:song_metadata
trim	utils.c	/^trim(char *str)$/;"	f
ts_timestamp_t	metadata.h	/^} ts_timestamp_t;$/;"	t	typeref:enum:__anon11
type	clients.h	/^	enum client_types type;$/;"	m	struct:client_cache_s	typeref:enum:client_cache_s::client_types
type	clients.h	/^	enum client_types type;$/;"	m	struct:client_type_s	typeref:enum:client_type_s::client_types
type	tagutils/tagutils-ogg.c	/^	char *type;$/;"	m	struct:_ogg_stream_processor	file:
type	tagutils/tagutils.c	/^	char* type;$/;"	m	struct:__anon5	file:
type	tagutils/tagutils.h	/^	char *type;$/;"	m	struct:song_metadata
types	minidlnatypes.h	/^ 	media_types types;      \/* types of files to scan *\/$/;"	m	struct:media_dir_s
uhttp	upnphttp.c	/^    struct upnphttp *uhttp;$/;"	m	struct:send_chain	typeref:struct:send_chain::upnphttp	file:
unescape_tag	utils.c	/^unescape_tag(const char *tag, int force_alloc)$/;"	f
updateID	testupnpdescgen.c	/^unsigned int updateID = 0;$/;"	v
updateID	upnpglobalvars.c	/^volatile uint32_t updateID = 0;$/;"	v
update_if_album_art	albumart.c	/^update_if_album_art(const char *path)$/;"	f
upnp_event_create_notify	upnpevents.c	/^upnp_event_create_notify(struct subscriber * sub)$/;"	f	file:
upnp_event_notify	upnpevents.c	/^struct upnp_event_notify {$/;"	s	file:
upnp_event_notify_connect	upnpevents.c	/^upnp_event_notify_connect(struct upnp_event_notify * obj)$/;"	f	file:
upnp_event_post_notify	upnpevents.c	/^upnp_event_post_notify(struct upnp_event_notify *obj)$/;"	f	file:
upnp_event_prepare	upnpevents.c	/^static void upnp_event_prepare(struct upnp_event_notify * obj)$/;"	f	file:
upnp_event_process_notify	upnpevents.c	/^upnp_event_process_notify(struct upnp_event_notify * obj)$/;"	f	file:
upnp_event_recv	upnpevents.c	/^static void upnp_event_recv(struct upnp_event_notify * obj)$/;"	f	file:
upnp_event_register_fd	upnpevents.c	/^upnp_event_register_fd(struct upnp_event_notify *obj)$/;"	f	file:
upnp_event_send	upnpevents.c	/^static void upnp_event_send(struct upnp_event_notify * obj)$/;"	f	file:
upnp_event_var_change_notify	upnpevents.c	/^upnp_event_var_change_notify(enum subscriber_service_enum service)$/;"	f
upnp_get_portmapping_number_of_entries	testupnpdescgen.c	/^int upnp_get_portmapping_number_of_entries()$/;"	f
upnpallowedvalues	upnpdescgen.c	/^static const char * const upnpallowedvalues[] =$/;"	v	file:
upnpconfigoptions	options.h	/^enum upnpconfigoptions {$/;"	g
upnpdefaultvalues	upnpdescgen.c	/^static const char * const upnpdefaultvalues[] =$/;"	v	file:
upnpevents_addSubscriber	upnpevents.c	/^upnpevents_addSubscriber(const char * eventurl,$/;"	f
upnpevents_removeSubscriber	upnpevents.c	/^upnpevents_removeSubscriber(const char * sid, int sidlen)$/;"	f
upnpevents_removeSubscribers	upnpevents.c	/^upnpevents_removeSubscribers(void)$/;"	f
upnphttp	upnphttp.h	/^struct upnphttp {$/;"	s
upnphttp_connCount	upnphttp.c	/^int upnphttp_connCount()$/;"	f
upnphttp_exit	upnphttp.c	/^void upnphttp_exit()$/;"	f
upnphttp_init	upnphttp.c	/^int upnphttp_init(int port)$/;"	f
upnphttp_openSocket	upnphttp.c	/^upnphttp_openSocket(unsigned short port)$/;"	f	file:
upnphttp_sendQueue	upnphttp.c	/^upnphttp_sendQueue(struct upnphttp *h, int fd, off_t offset, off_t size)$/;"	f	file:
upnptypes	upnpdescgen.c	/^static const char * const upnptypes[] =$/;"	v	file:
urldecode	tagutils/textutils.c	/^urldecode(char *src)$/;"	f
used	image_utils.c	/^	size_t used;$/;"	m	struct:my_dst_mgr	file:
used	tagutils/tagutils-ogg.c	/^	int used;$/;"	m	struct:__anon8	file:
utf16le_to_utf8	tagutils/textutils.c	/^utf16le_to_utf8(char *dst, int n, __u16 utf16le)$/;"	f
uuid	upnpevents.c	/^	char uuid[42];$/;"	m	struct:subscriber	file:
uuidvalue	testupnpdescgen.c	/^char uuidvalue[] = "uuid:12345678-0000-0000-0000-00000000abcd";$/;"	v
uuidvalue	upnpglobalvars.c	/^char uuidvalue[] = "uuid:00000000-0000-0000-0000-000000000000";$/;"	v
valid_cache	scanner.c	/^int valid_cache = 0;$/;"	v
value	options.h	/^	char value[MAX_OPTION_VALUE_LEN];$/;"	m	struct:option
value	upnpreplyparse.h	/^    char value[];$/;"	m	struct:NameValue
vbr_scale	tagutils/tagutils.h	/^	int vbr_scale;$/;"	m	struct:song_metadata
vc	tagutils/tagutils-ogg.c	/^	vorbis_comment vc;$/;"	m	struct:__anon9	file:
vc_scan	tagutils/tagutils-misc.c	/^vc_scan(struct song_metadata *psong, const char *comment, const size_t length)$/;"	f	file:
version	tagutils/tagutils.c	/^	unsigned char version[2];$/;"	m	struct:id3header	file:
vi	tagutils/tagutils-ogg.c	/^	vorbis_info vi;$/;"	m	struct:__anon9	file:
virtual_item	scanner.c	/^struct virtual_item$/;"	s	file:
w	tagutils/tagutils-asf.h	/^	__u16 w[2];$/;"	m	struct:_GUID
wBitsPerSample	tagutils/tagutils-asf.h	/^	__u16 wBitsPerSample;$/;"	m	struct:_WAVEFORMATEX
wBitsPerSample	tagutils/tagutils-asf.h	/^	__u16 wBitsPerSample;$/;"	m	struct:_avi_audio_format_t
wFormatTag	tagutils/tagutils-asf.h	/^	__u16 wFormatTag;$/;"	m	struct:_WAVEFORMATEX
wFormatTag	tagutils/tagutils-asf.h	/^	__u16 wFormatTag;$/;"	m	struct:_avi_audio_format_t
watch	inotify.c	/^struct watch$/;"	s	file:
watches	inotify.c	/^static struct watch *watches;$/;"	v	typeref:struct:watch	file:
wd	inotify.c	/^	int wd;		\/* watch descriptor *\/$/;"	m	struct:watch	file:
wd	linux/inotify.h	/^	__s32		wd;		\/* watch descriptor *\/$/;"	m	struct:inotify_event
wfx	tagutils/tagutils-asf.h	/^	WAVEFORMATEX wfx;$/;"	m	struct:_asf_audio_stream_t
width	image_utils.h	/^	int32_t width;$/;"	m	struct:__anon2
wildcard	minidlnatypes.h	/^	uint8_t wildcard;$/;"	m	struct:album_art_name_s
winamp_genre	tagutils/tagutils.c	/^char *winamp_genre[] = {$/;"	v
write	minidlna.h	/^    struct event_handler write;$/;"	m	struct:event_struct	typeref:struct:event_struct::event_handler
writepidfile	minidlna.c	/^writepidfile(const char *fname, int pid, uid_t uid)$/;"	f	file:
xasprintf	utils.c	/^xasprintf(char **strp, char *fmt, ...)$/;"	f
xing_offset	tagutils/tagutils-mp3.h	/^	int xing_offset;                        \/\/ for xing hdr$/;"	m	struct:mp3_frameinfo
xml	minixml.h	/^	const char *xml;	\/* pointer to current character *\/$/;"	m	struct:xmlparser
xml_pretty_print	testupnpdescgen.c	/^xml_pretty_print(const char * s, int len, FILE * f)$/;"	f
xmlend	minixml.h	/^	const char *xmlend;$/;"	m	struct:xmlparser
xmlparser	minixml.h	/^struct xmlparser {$/;"	s
xmlsize	minixml.h	/^	int xmlsize;$/;"	m	struct:xmlparser
xmlstart	minixml.h	/^	const char *xmlstart;$/;"	m	struct:xmlparser
xmlver	upnpdescgen.c	/^static const char xmlver[] = $/;"	v	file:
year	tagutils/tagutils.h	/^	int year;                               \/\/ TDRC$/;"	m	struct:song_metadata
