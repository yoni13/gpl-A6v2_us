Index: linux-3.3.8/net/bridge/br_forward.c
===================================================================
--- linux-3.3.8.orig/net/bridge/br_forward.c	2016-12-15 06:56:42.747896761 +0530
+++ linux-3.3.8/net/bridge/br_forward.c	2016-12-15 06:58:56.067896479 +0530
@@ -55,7 +55,7 @@

 int br_forward_finish(struct sk_buff *skb)
 {
-	return NF_HOOK(NFPROTO_BRIDGE, NF_BR_POST_ROUTING, skb, NULL, skb->dev,
+	return BR_HOOK(NFPROTO_BRIDGE, NF_BR_POST_ROUTING, skb, NULL, skb->dev,
		       br_dev_queue_push_xmit);

 }
@@ -74,7 +74,7 @@
		return;
	}

-	NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_OUT, skb, NULL, skb->dev,
+	BR_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_OUT, skb, NULL, skb->dev,
		br_forward_finish);
 }

@@ -91,7 +91,7 @@
	skb->dev = to->dev;
	skb_forward_csum(skb);

-	NF_HOOK(NFPROTO_BRIDGE, NF_BR_FORWARD, skb, indev, skb->dev,
+	BR_HOOK(NFPROTO_BRIDGE, NF_BR_FORWARD, skb, indev, skb->dev,
		br_forward_finish);
 }

Index: linux-3.3.8/net/bridge/br_input.c
===================================================================
--- linux-3.3.8.orig/net/bridge/br_input.c	2016-12-15 06:56:42.747896761 +0530
+++ linux-3.3.8/net/bridge/br_input.c	2016-12-15 06:58:56.087896479 +0530
@@ -48,7 +48,7 @@
	indev = skb->dev;
	skb->dev = brdev;

-	return NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN, skb, indev, NULL,
+	return BR_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN, skb, indev, NULL,
		       netif_receive_skb);
 }

@@ -219,7 +219,7 @@
		}

		/* Deliver packet to local host only */
-		if (NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN, skb, skb->dev,
+		if (BR_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN, skb, skb->dev,
			    NULL, br_handle_local_finish)) {
			return RX_HANDLER_CONSUMED; /* consumed by filter */
		} else {
@@ -244,7 +244,7 @@
		if (!compare_ether_addr(p->br->dev->dev_addr, dest))
			skb->pkt_type = PACKET_HOST;

-		NF_HOOK(NFPROTO_BRIDGE, NF_BR_PRE_ROUTING, skb, skb->dev, NULL,
+		BR_HOOK(NFPROTO_BRIDGE, NF_BR_PRE_ROUTING, skb, skb->dev, NULL,
			br_handle_frame_finish);
		break;
	default:
Index: linux-3.3.8/net/bridge/br_multicast.c
===================================================================
--- linux-3.3.8.orig/net/bridge/br_multicast.c	2012-06-01 12:46:13.000000000 +0530
+++ linux-3.3.8/net/bridge/br_multicast.c	2016-12-15 06:58:56.087896479 +0530
@@ -753,7 +753,7 @@
	if (port) {
		__skb_push(skb, sizeof(struct ethhdr));
		skb->dev = port->dev;
-		NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_OUT, skb, NULL, skb->dev,
+		BR_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_OUT, skb, NULL, skb->dev,
			dev_queue_xmit);
	} else
		netif_rx(skb);
Index: linux-3.3.8/net/bridge/br_netfilter.c
===================================================================
--- linux-3.3.8.orig/net/bridge/br_netfilter.c	2012-06-01 12:46:13.000000000 +0530
+++ linux-3.3.8/net/bridge/br_netfilter.c	2016-12-15 06:58:56.087896479 +0530
@@ -52,12 +52,14 @@
 static int brnf_call_iptables __read_mostly = 1;
 static int brnf_call_ip6tables __read_mostly = 1;
 static int brnf_call_arptables __read_mostly = 1;
+static int brnf_call_custom __read_mostly;
 static int brnf_filter_vlan_tagged __read_mostly = 0;
 static int brnf_filter_pppoe_tagged __read_mostly = 0;
 #else
 #define brnf_call_iptables 1
 #define brnf_call_ip6tables 1
 #define brnf_call_arptables 1
+#define brnf_call_custom 1
 #define brnf_filter_vlan_tagged 0
 #define brnf_filter_pppoe_tagged 0
 #endif
@@ -71,6 +73,16 @@
 #define IS_ARP(skb) \
	(!vlan_tx_tag_present(skb) && skb->protocol == htons(ETH_P_ARP))

+
+int brnf_call_ebtables __read_mostly = 0;
+EXPORT_SYMBOL_GPL(brnf_call_ebtables);
+
+bool br_netfilter_run_hooks(void)
+{
+	return brnf_call_iptables | brnf_call_ip6tables | brnf_call_arptables |
+	       brnf_call_ebtables | brnf_call_custom;
+}
+
 static inline __be16 vlan_proto(const struct sk_buff *skb)
 {
	if (vlan_tx_tag_present(skb))
@@ -1006,6 +1018,13 @@
		.mode		= 0644,
		.proc_handler	= brnf_sysctl_call_tables,
	},
+	{
+		.procname	= "bridge-nf-call-custom",
+		.data		= &brnf_call_custom,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= brnf_sysctl_call_tables,
+ 	},
	{ }
 };

Index: linux-3.3.8/net/bridge/br_private.h
===================================================================
--- linux-3.3.8.orig/net/bridge/br_private.h	2016-12-15 06:56:42.747896761 +0530
+++ linux-3.3.8/net/bridge/br_private.h	2016-12-15 07:00:07.375896329 +0530
@@ -486,15 +486,29 @@

 /* br_netfilter.c */
 #ifdef CONFIG_BRIDGE_NETFILTER
+extern int brnf_call_ebtables;
 extern int br_netfilter_init(void);
 extern void br_netfilter_fini(void);
 extern void br_netfilter_rtable_init(struct net_bridge *);
+extern bool br_netfilter_run_hooks(void);
 #else
 #define br_netfilter_init()	(0)
 #define br_netfilter_fini()	do { } while(0)
 #define br_netfilter_rtable_init(x)
+#define br_netfilter_run_hooks()   false
 #endif

+static inline int
+BR_HOOK(uint8_t pf, unsigned int hook, struct sk_buff *skb,
+	struct net_device *in, struct net_device *out,
+	int (*okfn)(struct sk_buff *))
+{
+	if (!br_netfilter_run_hooks())
+		return okfn(skb);
+
+	return NF_HOOK(pf, hook, skb, in, out, okfn);
+}
+
 /* br_stp.c */
 extern void br_log_state(const struct net_bridge_port *p);
 extern struct net_bridge_port *br_get_port(struct net_bridge *br,
Index: linux-3.3.8/net/bridge/br_stp_bpdu.c
===================================================================
--- linux-3.3.8.orig/net/bridge/br_stp_bpdu.c	2012-06-01 12:46:13.000000000 +0530
+++ linux-3.3.8/net/bridge/br_stp_bpdu.c	2016-12-15 06:58:56.087896479 +0530
@@ -52,7 +52,7 @@

	skb_reset_mac_header(skb);

-	NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_OUT, skb, NULL, skb->dev,
+	BR_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_OUT, skb, NULL, skb->dev,
		dev_queue_xmit);
 }

Index: linux-3.3.8/net/bridge/netfilter/ebtables.c
===================================================================
--- linux-3.3.8.orig/net/bridge/netfilter/ebtables.c	2012-06-01 12:46:13.000000000 +0530
+++ linux-3.3.8/net/bridge/netfilter/ebtables.c	2016-12-15 06:58:56.091896479 +0530
@@ -2403,11 +2403,13 @@
	}

	printk(KERN_INFO "Ebtables v2.0 registered\n");
+	brnf_call_ebtables = 1;
	return 0;
 }

 static void __exit ebtables_fini(void)
 {
+	brnf_call_ebtables = 0;
	nf_unregister_sockopt(&ebt_sockopts);
	xt_unregister_target(&ebt_standard_target);
	printk(KERN_INFO "Ebtables v2.0 unregistered\n");
