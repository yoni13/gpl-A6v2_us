#!/bin/sh /etc/rc.common
# Copyright (C) 2010 Jo-Philipp Wich

START=50

SERVICE_DAEMONIZE=1
SERVICE_WRITE_PID=1

UHTTPD_BIN="/usr/sbin/uhttpd"
PX5G_BIN="/usr/sbin/px5g"
OPENSSL_BIN="/usr/bin/openssl"

append_arg() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get val "$cfg" "$var"
	[ -n "$val" -o -n "$def" ] && append UHTTPD_ARGS "$opt ${val:-$def}"
}

append_bool() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get_bool val "$cfg" "$var" "$def"
	[ "$val" = 1 ] && append UHTTPD_ARGS "$opt"
}

generate_keys() {
	local cfg="$1"
	local key="$2"
	local crt="$3"
	local days bits country state location commonname

	config_get days       "$cfg" days	"1825"
	config_get bits       "$cfg" bits	"1024"
	config_get country    "$cfg" country	"CN"
	config_get state      "$cfg" state		"GD"
	config_get location   "$cfg" location	"ShenZhen"
	config_get commonname "$cfg" commonname	"tplinkwifi.net"

    echo "generate key: $days $bits"
	if [ -x "$OPENSSL_BIN" ]; then
	{
		# generate key and cert with openssl
		$OPENSSL_BIN genrsa -out "${UHTTPD_KEY}.new" ${bits:-1024} >/dev/null 2>&1
		$OPENSSL_BIN req -new -key "${UHTTPD_KEY}.new" -out "${UHTTPD_CERT}.tmp" \
		    -subj /C="${country:-CN}"/CN="${commonname:-tplinkwifi.net}" >/dev/null 2>&1
		$OPENSSL_BIN x509 -req -days ${days:-1825} -in "${UHTTPD_CERT}.tmp" -signkey "${UHTTPD_KEY}.new" -out "${UHTTPD_CERT}.new" >/dev/null 2>&1
        
		mv "${UHTTPD_KEY}.new" "${UHTTPD_KEY}"
		mv "${UHTTPD_CERT}.new" "${UHTTPD_CERT}"
		rm "${UHTTPD_CERT}.tmp"
	}
	else
	{
		# generate key and cert with px5g
		[ -x "$PX5G_BIN" ] && {
			$PX5G_BIN selfsigned -der \
				-days ${days:-1825} -newkey rsa:${bits:-1024} -keyout "$UHTTPD_KEY" -out "$UHTTPD_CERT" \
				-subj /C="${country:-CN}"/ST="${state:-GD}"/L="${location:-ShenZhen}"/CN="${commonname:-tplinkwifi.net}" >/dev/null 2>&1
		}
	}
    fi

	# TODO: write to flash
    #[ -f "$UHTTPD_CERT" -a -f "$UHTTPD_KEY" ] && {
	#	echo "write cert and key to flash"
    #}
}

start_instance()
{
	UHTTPD_ARGS=""
	UHTTPD_CERT=""
	UHTTPD_KEY=""

	local cfg="$1"
	local realm="$(uci_get system.@system[0].hostname)"
	local https_support="$(uci -c /etc/profile.d get profile.@https_mgnt[0].https_support)"
	local listen http https interpreter indexes path
	    
	echo "start_instance() $1"
    
	append_arg "$cfg" home "-h"
	append_arg "$cfg" realm "-r" "${realm:-OpenWrt}"
	append_arg "$cfg" config "-c"
	append_arg "$cfg" cgi_prefix "-x"
	append_arg "$cfg" lua_prefix "-l"
	append_arg "$cfg" lua_handler "-L"
	append_arg "$cfg" script_timeout "-t"
	append_arg "$cfg" network_timeout "-T"
	append_arg "$cfg" tcp_keepalive "-A"
	append_arg "$cfg" error_page "-E"
	if [ "$https_support" != "yes" ]; then
		append_arg "$cfg" max_requests "-n" 3
	else
		append_arg "$cfg" max_connections "-n" 16
	fi

	append_bool "$cfg" no_symlinks "-S" 0
	append_bool "$cfg" no_dirlists "-D" 0
	append_bool "$cfg" rfc1918_filter "-R" 0

	config_get http "$cfg" listen_http
	for listen in $http; do
		append UHTTPD_ARGS "-p $listen"
	done

	config_get interpreter "$cfg" interpreter
	for path in $interpreter; do
		append UHTTPD_ARGS "-i $path"
	done

	config_get indexes "$cfg" index_page
	for path in $indexes; do
		append UHTTPD_ARGS "-I $path"
	done

    # NOTICE: always set 
	[ "$https_support" == "yes" ] && 
	{
		config_get https "$cfg" listen_https
		config_get UHTTPD_KEY  "$cfg" key  /etc/uhttpd.key
		config_get UHTTPD_CERT "$cfg" cert /etc/uhttpd.crt

		[ -n "$https" ] && {
			# TODO: try to load key and cert from flash			
		
			# generate key and cert if none		
			[ -f "$UHTTPD_CERT" -a -f "$UHTTPD_KEY" ] || {
				#config_foreach generate_keys cert
				generate_keys "TP_Cert"
			}

			[ -f "$UHTTPD_CERT" -a -f "$UHTTPD_KEY" ] && {
				append_arg "$cfg" cert "-C"
				append_arg "$cfg" key  "-K"
				append_arg "$cfg" ciphers "-N" "ALL:+AES256:!aNULL:!MD5"

				for listen in $https; do
					append UHTTPD_ARGS "-s $listen"
				done
			}
		}
	}

	SERVICE_PID_FILE=/var/run/uhttpd_${cfg}.pid	
	service_start $UHTTPD_BIN -f $UHTTPD_ARGS

	# Check if daemon is running, if not then
	# re-execute in foreground to display error.
	#sleep 1 && service_check $UHTTPD_BIN || \
	#	$UHTTPD_BIN -f $UHTTPD_ARGS
}

stop_instance()
{
	local cfg="$1"
    
	echo "stop_instance() $1"
    
	SERVICE_PID_FILE=/var/run/uhttpd_${cfg}.pid
	service_stop $UHTTPD_BIN
}

start() {
	config_load uhttpd
	config_foreach start_instance uhttpd
}

stop() {
	config_load uhttpd
	config_foreach stop_instance uhttpd
}
